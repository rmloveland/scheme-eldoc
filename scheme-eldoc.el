;;; scheme-eldoc.el

;; https://www.emacswiki.org/emacs/ElDoc

(defun scheme-eldoc-function ()
  "Return a doc string appropriate for the current context, or NIL."
  (symbol-value (intern-soft (thing-at-point 'symbol) *scheme-eldoc-obarray*)))

(defun scheme-eldoc--build-obarray ()
  (cl-loop for pair in *scheme-eldoc-data* collect
           (let ((fn (car pair))
                 (args (cdr pair)))
             (set (intern fn *scheme-eldoc-obarray*) args))))

(defun scheme-setup-eldoc ()
  (interactive)
  (scheme-eldoc--build-obarray)
  (set (make-local-variable 'eldoc-documentation-function)
       'scheme-eldoc-function))

(defvar *scheme-eldoc-obarray* (make-vector 2048 0))

(defvar *scheme-eldoc-data*
  '(("abs" . "abs: (x)")
    ("append" . "append: (list ...,)")
    ("assoc" . "assoc: (obj alist)")
    ("assq" . "assq: (obj alist)")
    ("assv" . "assv: (obj alist)")
    ("boolean?" . "boolean?: (obj)")
    ("caar" . "caar: (pair)")
    ("cadr" . "cadr: (pair)")
    ("call-with-input-file" . "call-with-input-file: (string proc)")
    ("call-with-output-file" . "call-with-output-file: (string proc)")
    ("cdddar" . "cdddar: (pair)")
    ("cddddr" . "cddddr: (pair)")
    ("char-alphabetic?" . "char-alphabetic?: (char)")
    ("char-ci<=?" . "char-ci<=?: (char1 char2)")
    ("char-ci<?" . "char-ci<?: (char1 char2)")
    ("char-ci=?" . "char-ci=?: (char1 char2)")
    ("char-ci>=?" . "char-ci>=?: (char1 char2)")
    ("char-ci>?" . "char-ci>?: (char1 char2)")
    ("char-downcase" . "char-downcase: (char)")
    ("char-lower-case?" . "char-lower-case?: (letter)")
    ("char-numeric?" . "char-numeric?: (char)")
    ("char-upcase" . "char-upcase: (char)")
    ("char-upper-case?" . "char-upper-case?: (letter)")
    ("char-whitespace?" . "char-whitespace?: (char)")
    ("display" . "display: (obj)")
    ("display" . "display: (obj port)")
    ("equal?" . "equal?: (obj1 obj2)")
    ("even?" . "even?: (N)")
    ("for-each" . "for-each: (proc list1 list2 ...,)")
    ("force" . "force: (promise)")
    ("gcd" . "gcd: (n1 ...,)")
    ("lcm" . "lcm: (n1 ...,)")
    ("length" . "length: (list)")
    ("list" . "list: (OBJ ...,)")
    ("list->string" . "list->string: (list)")
    ("list->vector" . "list->vector: (list)")
    ("list-ref" . "list-ref: (list K)")
    ("list-tail" . "list-tail: (list K)")
    ("list?" . "list?: (obj)")
    ("map" . "map: (proc list1 list2 ...,)")
    ("max" . "max: (x1 x2 ...,)")
    ("member" . "member: (obj list)")
    ("memq" . "memq: (obj list)")
    ("memv" . "memv: (obj list)")
    ("min" . "min: (x1 x2 ...,)")
    ("negative?" . "negative?: (X)")
    ("newline" . "newline: (())")
    ("newline" . "newline: (port)")
    ("not" . "not: (obj)")
    ("null?" . "null?: (obj)")
    ("odd?" . "odd?: (N)")
    ("positive?" . "positive?: (X)")
    ("rationalize" . "rationalize: (x y)")
    ("read" . "read: (())")
    ("read" . "read: (port)")
    ("reverse" . "reverse: (list)")
    ("string" . "string: (char ...,)")
    ("string->list" . "string->list: (string)")
    ("string-append" . "string-append: (STRING ...,)")
    ("string-ci<=?" . "string-ci<=?: (string1 string2)")
    ("string-ci<?" . "string-ci<?: (string1 string2)")
    ("string-ci=?" . "string-ci=?: (string1 string2)")
    ("string-ci>=?" . "string-ci>=?: (string1 string2)")
    ("string-ci>?" . "string-ci>?: (string1 string2)")
    ("string-copy" . "string-copy: (string)")
    ("string-fill!" . "string-fill!: (string char)")
    ("string<=?" . "string<=?: (string1 string2)")
    ("string<?" . "string<?: (string1 string2)")
    ("string=?" . "string=?: (string1 string2)")
    ("string>=?" . "string>=?: (string1 string2)")
    ("string>?" . "string>?: (string1 string2)")
    ("substring" . "substring: (string start end)")
    ("vector" . "vector: (obj ...,)")
    ("vector->list" . "vector->list: (vector)")
    ("vector-fill!" . "vector-fill!: (vector fill)")
    ("write" . "write: (obj)")
    ("write" . "write: (obj port)")
    ("zero?" . "zero?: (Z)")
    ("and" . "and: (<test1> ...,)")
    ("begin" . "begin: (<expression1> <expression2> ...,)")
    ("case" . "case: (<key> <clause1> <clause2> ...,)")
    ("cond" . "cond: (<clause1> <clause2> ...,)")
    ("delay" . "delay: (<expression>)")
    ("do" . "do: (((<variable1> <init1> <step1>) ...) (<test>)")
    ("let" . "let: (<bindings> <body>)")
    ("let" . "let: (<variable> <bindings> <body>)")
    ("let*" . "let*: (<bindings> <body>)")
    ("letrec" . "letrec: (<bindings> <body>)")
    ("or" . "or: (<test1> ...,)")
    ("-" . "-: (z1 z2 ...,)")
    ("/" . "/: (z1 z2 ...,)")
    ("interaction-environment" . "interaction-environment: (())")
    ("load" . "load: (filename)")
    ("transcript-off" . "transcript-off: (())")
    ("transcript-on" . "transcript-on: (filename)")
    ("with-input-from-file" . "with-input-from-file: (string thunk)")
    ("with-output-to-file" . "with-output-to-file: (string thunk)")
    ("*" . "*: (z1 ...,)")
    ("+" . "+: (z1 ...,)")
    ("-" . "-: (Z)")
    ("-" . "-: (z1 z2)")
    ("/" . "/: (Z)")
    ("/" . "/: (z1 z2)")
    ("<" . "<: (x1 x2 x3 ...,)")
    ("<=" . "<=: (x1 x2 x3 ...,)")
    ("=" . "=: (z1 z2 z3 ...,)")
    (">" . ">: (x1 x2 x3 ...,)")
    (">=" . ">=: (x1 x2 x3 ...,)")
    ("acos" . "acos: (Z)")
    ("angle" . "angle: (Z)")
    ("apply" . "apply: (proc arg1 ... args)")
    ("asin" . "asin: (Z)")
    ("atan" . "atan: (Y X)")
    ("atan" . "atan: (Z)")
    ("call-with-current-continuation" . "call-with-current-continuation: (proc)")
    ("call-with-values" . "call-with-values: (producer consumer)")
    ("car" . "car: (pair)")
    ("cdr" . "cdr: (pair)")
    ("ceiling" . "ceiling: (x)")
    ("char->integer" . "char->integer: (char)")
    ("char-ready?" . "char-ready?: (())")
    ("char-ready?" . "char-ready?: (port)")
    ("char<=?" . "char<=?: (char1 char2)")
    ("char<?" . "char<?: (char1 char2)")
    ("char=?" . "char=?: (char1 char2)")
    ("char>=?" . "char>=?: (char1 char2)")
    ("char>?" . "char>?: (char1 char2)")
    ("char?" . "char?: (obj)")
    ("close-input-port" . "close-input-port: (port)")
    ("close-output-port" . "close-output-port: (port)")
    ("complex?" . "complex?: (obj)")
    ("cons" . "cons: (obj1 obj2)")
    ("cos" . "cos: (Z)")
    ("current-input-port" . "current-input-port: (())")
    ("current-output-port" . "current-output-port: (())")
    ("denominator" . "denominator: (Q)")
    ("dynamic-wind" . "dynamic-wind: (before thunk after)")
    ("eof-object?" . "eof-object?: (obj)")
    ("eq?" . "eq?: (obj1 obj2)")
    ("eqv?" . "eqv?: (obj1 obj2)")
    ("eval" . "eval: (expression environment-specifier)")
    ("exact->inexact" . "exact->inexact: (Z)")
    ("exact?" . "exact?: (Z)")
    ("exp" . "exp: (Z)")
    ("expt" . "expt: (z1 z2)")
    ("floor" . "floor: (x)")
    ("imag-part" . "imag-part: (Z)")
    ("inexact->exact" . "inexact->exact: (Z)")
    ("inexact?" . "inexact?: (Z)")
    ("input-port?" . "input-port?: (obj)")
    ("integer->char" . "integer->char: (N)")
    ("integer?" . "integer?: (obj)")
    ("log" . "log: (Z)")
    ("magnitude" . "magnitude: (Z)")
    ("make-polar" . "make-polar: (x3 x4)")
    ("make-rectangular" . "make-rectangular: (x1 x2)")
    ("make-string" . "make-string: (K)")
    ("make-string" . "make-string: (K char)")
    ("make-vector" . "make-vector: (K)")
    ("make-vector" . "make-vector: (K FILL)")
    ("make-vector" . "make-vector: (k)")
    ("make-vector" . "make-vector: (k fill)")
    ("modulo" . "modulo: (n1 n2)")
    ("null-environment" . "null-environment: (version)")
    ("number->string" . "number->string: (z)")
    ("number->string" . "number->string: (z radix)")
    ("number?" . "number?: (obj)")
    ("numerator" . "numerator: (Q)")
    ("open-input-file" . "open-input-file: (filename)")
    ("open-output-file" . "open-output-file: (filename)")
    ("output-port?" . "output-port?: (obj)")
    ("pair?" . "pair?: (obj)")
    ("peek-char" . "peek-char: (())")
    ("peek-char" . "peek-char: (port)")
    ("procedure?" . "procedure?: (obj)")
    ("quotient" . "quotient: (n1 n2)")
    ("rational?" . "rational?: (obj)")
    ("read-char" . "read-char: (())")
    ("read-char" . "read-char: (port)")
    ("real-part" . "real-part: (Z)")
    ("real?" . "real?: (obj)")
    ("remainder" . "remainder: (n1 n2)")
    ("round" . "round: (x)")
    ("scheme-report-environment" . "scheme-report-environment: (version)")
    ("set-car!" . "set-car!: (pair obj)")
    ("set-cdr!" . "set-cdr!: (pair obj)")
    ("sin" . "sin: (Z)")
    ("sqrt" . "sqrt: (Z)")
    ("string->number" . "string->number: (string)")
    ("string->number" . "string->number: (string radix)")
    ("string->symbol" . "string->symbol: (string)")
    ("string-length" . "string-length: (string)")
    ("string-ref" . "string-ref: (string K)")
    ("string-set!" . "string-set!: (string k char)")
    ("string?" . "string?: (obj)")
    ("symbol->string" . "symbol->string: (symbol)")
    ("symbol?" . "symbol?: (obj)")
    ("tan" . "tan: (Z)")
    ("truncate" . "truncate: (x)")
    ("values" . "values: (obj ...)")
    ("vector-length" . "vector-length: (vector)")
    ("vector-ref" . "vector-ref: (VECTOR K)")
    ("vector-ref" . "vector-ref: (vector k)")
    ("vector-set!" . "vector-set!: (vector k obj)")
    ("vector?" . "vector?: (obj)")
    ("write-char" . "write-char: (char)")
    ("write-char" . "write-char: (char port)")
    ("if" . "if: (<test> <consequent>)")
    ("if" . "if: (<test> <consequent> <alternate>)")
    ("lambda" . "lambda: (<formals> <body>)")
    ("let-syntax" . "let-syntax: (<bindings> <body>)")
    ("letrec-syntax" . "letrec-syntax: (<bindings> <body>)")
    ("quasiquote" . "quasiquote: (<qq template>)")
    ("quote" . "quote: (<datum>)")
    ("set!" . "set!: (<variable> <expression>)")

    ;; STOP HERE

    ("alist?" . "alist?: (object)")
    ("assq" . "assq: (object alist)")
    ("assv" . "assv: (object alist)")
    ("assoc" . "assoc: (object alist)")
    ("association-procedure" . "association-procedure: (predicate selector)")
    ("del-assq" . "del-assq: (object alist)")
    ("del-assv" . "del-assv: (object alist)")
    ("del-assoc" . "del-assoc: (object alist)")
    ("del-assq!" . "del-assq!: (object alist)")
    ("del-assv!" . "del-assv!: (object alist)")
    ("del-assoc!" . "del-assoc!: (object alist)")
    ("delete-association-procedure" . "delete-association-procedure: (deletor predicate selector)")
    ("alist-copy" . "alist-copy: (alist)")
    ("make-1d-table" . "make-1d-table: ()")
    ("1d-table?" . "1d-table?: object")
    ("1d-table/put!" . "1d-table/put!: (1d-table key datum)")
    ("1d-table/remove!" . "1d-table/remove!: (1d-table key)")
    ("1d-table/get" . "1d-table/get: (1d-table key default)")
    ("1d-table/lookup" . "1d-table/lookup: (1d-table key if-found if-not-found)")
    ("1d-table/alist" . "1d-table/alist: (1d-table)")
    ("2d-put!" . "2d-put!: (x-key y-key datum)")
    ("2d-remove!" . "2d-remove!: (x-key y-key)")
    ("2d-get" . "2d-get: (x-key y-key)")
    ("2d-get-alist-x" . "2d-get-alist-x: (x-key)")
    ("2d-get-alist-y" . "2d-get-alist-y: (y-key)")
    ("make-strong-eq-hash-table" . "make-strong-eq-hash-table: ([initial-size])")
    ("make-key-weak-eq-hash-table" . "make-key-weak-eq-hash-table: ([initial-size])")
    ("make-key-ephemeral-eq-hash-table" . "make-key-ephemeral-eq-hash-table: ([initial-size])")
    ("make-strong-eqv-hash-table" . "make-strong-eqv-hash-table: ([initial-size])")
    ("make-key-weak-eqv-hash-table" . "make-key-weak-eqv-hash-table: ([initial-size])")
    ("make-key-ephemeral-eqv-hash-table" . "make-key-ephemeral-eqv-hash-table: ([initial-size])")
    ("make-equal-hash-table" . "make-equal-hash-table: ([initial-size])")
    ("make-string-hash-table" . "make-string-hash-table: ([initial-size])")
    ("hash-table/constructor" . "hash-table/constructor: (key-hash key=? rehash-after-gc? entry-type)")
    ("hash-table/clean!" . "hash-table/clean!: (hash-table)")
    ("make-weak-eq-hash-table" . "make-weak-eq-hash-table: ([initial-size])")
    ("make-eq-hash-table" . "make-eq-hash-table: ([initial-size])")
    ("make-weak-eqv-hash-table" . "make-weak-eqv-hash-table: ([initial-size])")
    ("make-eqv-hash-table" . "make-eqv-hash-table: ([initial-size])")
    ("strong-hash-table/constructor" . "strong-hash-table/constructor: (key-hash key=? [rehash-after-gc?])")
    ("weak-hash-table/constructor" . "weak-hash-table/constructor: (key-hash key=? [rehash-after-gc?])")
    ("hash-table?" . "hash-table?: (object)")
    ("hash-table/put!" . "hash-table/put!: (hash-table key datum)")
    ("hash-table/get" . "hash-table/get: (hash-table key default)")
    ("hash-table/remove!" . "hash-table/remove!: (hash-table key)")
    ("hash-table/clear!" . "hash-table/clear!: (hash-table)")
    ("hash-table/count" . "hash-table/count: (hash-table)")
    ("hash-table->alist" . "hash-table->alist: (hash-table)")
    ("hash-table/key-list" . "hash-table/key-list: (hash-table)")
    ("hash-table/datum-list" . "hash-table/datum-list: (hash-table)")
    ("hash-table/for-each" . "hash-table/for-each: (hash-table procedure)")
    ("hash-table/lookup" . "hash-table/lookup: (hash-table key if-found if-not-found)")
    ("hash-table/modify!" . "hash-table/modify!: (hash-table key default procedure)")
    ("hash-table/intern!" . "hash-table/intern!: (hash-table key get-default)")
    ("hash-table/size" . "hash-table/size: (hash-table)")
    ("hash-table/rehash-size" . "hash-table/rehash-size: (hash-table)")
    ("set-hash-table/rehash-size!" . "set-hash-table/rehash-size!: (hash-table x)")
    ("hash-table/rehash-threshold" . "hash-table/rehash-threshold: (hash-table)")
    ("set-hash-table/rehash-threshold!" . "set-hash-table/rehash-threshold!: (hash-table x)")
    ("eq-hash" . "eq-hash: (object)")
    ("eqv-hash" . "eqv-hash: (object)")
    ("equal-hash" . "equal-hash: (object)")
    ("eq-hash-mod" . "eq-hash-mod: (object modulus)")
    ("eqv-hash-mod" . "eqv-hash-mod: (object modulus)")
    ("equal-hash-mod" . "equal-hash-mod: (object modulus)")
    ("hash" . "hash: (object [table])")
    ("unhash" . "unhash: (k [table])")
    ("object-hashed?" . "object-hashed?: (object [table])")
    ("valid-hash-number?" . "valid-hash-number?: (k [table])")
    ("object-hash" . "object-hash: (object [table [insert?]])")
    ("object-unhash" . "object-unhash: (k [table])")
    ("hash-table/make" . "hash-table/make: ()")
    ("make-rb-tree" . "make-rb-tree: key=? key<?")
    ("rb-tree?" . "rb-tree?: (object)")
    ("rb-tree/insert!" . "rb-tree/insert!: (rb-tree key datum)")
    ("rb-tree/lookup" . "rb-tree/lookup: (rb-tree key default)")
    ("rb-tree/delete!" . "rb-tree/delete!: (rb-tree key)")
    ("rb-tree->alist" . "rb-tree->alist: (rb-tree)")
    ("rb-tree/key-list" . "rb-tree/key-list: (rb-tree)")
    ("rb-tree/datum-list" . "rb-tree/datum-list: (rb-tree)")
    ("rb-tree/equal?" . "rb-tree/equal?: (rb-tree-1 rb-tree-2 datum=?)")
    ("rb-tree/empty?" . "rb-tree/empty?: (rb-tree)")
    ("rb-tree/size" . "rb-tree/size: (rb-tree)")
    ("rb-tree/height" . "rb-tree/height: (rb-tree)")
    ("rb-tree/copy" . "rb-tree/copy: (rb-tree)")
    ("alist->rb-tree" . "alist->rb-tree: (alist key=? key<?)")
    ("rb-tree/min" . "rb-tree/min: (rb-tree default)")
    ("rb-tree/min-datum" . "rb-tree/min-datum: (rb-tree default)")
    ("rb-tree/min-pair" . "rb-tree/min-pair: (rb-tree)")
    ("rb-tree/max" . "rb-tree/max: (rb-tree default)")
    ("rb-tree/max-datum" . "rb-tree/max-datum: (rb-tree default)")
    ("rb-tree/max-pair" . "rb-tree/max-pair: (rb-tree)")
    ("rb-tree/delete-min!" . "rb-tree/delete-min!: (rb-tree default)")
    ("rb-tree/delete-min-datum!" . "rb-tree/delete-min-datum!: (rb-tree default)")
    ("rb-tree/delete-min-pair!" . "rb-tree/delete-min-pair!: (rb-tree)")
    ("rb-tree/delete-max!" . "rb-tree/delete-max!: (rb-tree default)")
    ("rb-tree/delete-max-datum!" . "rb-tree/delete-max-datum!: (rb-tree default)")
    ("rb-tree/delete-max-pair!" . "rb-tree/delete-max-pair!: (rb-tree)")
    ("make-wt-tree-type" . "make-wt-tree-type: (key<?)")
    ("make-wt-tree" . "make-wt-tree: (wt-tree-type)")
    ("singleton-wt-tree" . "singleton-wt-tree: (wt-tree-type key datum)")
    ("alist->wt-tree" . "alist->wt-tree: (tree-type alist)")
    ("wt-tree?" . "wt-tree?: (object)")
    ("wt-tree/empty?" . "wt-tree/empty?: (wt-tree)")
    ("wt-tree/size" . "wt-tree/size: (wt-tree)")
    ("wt-tree/add" . "wt-tree/add: (wt-tree key datum)")
    ("wt-tree/add!" . "wt-tree/add!: (wt-tree key datum)")
    ("wt-tree/member?" . "wt-tree/member?: (key wt-tree)")
    ("wt-tree/lookup" . "wt-tree/lookup: (wt-tree key default)")
    ("wt-tree/delete" . "wt-tree/delete: (wt-tree key)")
    ("wt-tree/delete!" . "wt-tree/delete!: (wt-tree key)")
    ("wt-tree/split<" . "wt-tree/split<: (wt-tree bound)")
    ("wt-tree/split>" . "wt-tree/split>: (wt-tree bound)")
    ("wt-tree/union" . "wt-tree/union: (wt-tree-1 wt-tree-2)")
    ("wt-tree/intersection" . "wt-tree/intersection: (wt-tree-1 wt-tree-2)")
    ("wt-tree/difference" . "wt-tree/difference: (wt-tree-1 wt-tree-2)")
    ("wt-tree/subset?" . "wt-tree/subset?: (wt-tree-1 wt-tree-2)")
    ("wt-tree/set-equal?" . "wt-tree/set-equal?: (wt-tree-1 wt-tree-2)")
    ("wt-tree/fold" . "wt-tree/fold: (combiner initial wt-tree)")
    ("wt-tree/for-each" . "wt-tree/for-each: (action wt-tree)")
    ("wt-tree/union-merge" . "wt-tree/union-merge: (wt-tree-1 wt-tree-2 merge)")
    ("wt-tree/index" . "wt-tree/index: (wt-tree index)")
    ("wt-tree/index-datum" . "wt-tree/index-datum: (wt-tree index)")
    ("wt-tree/index-pair" . "wt-tree/index-pair: (wt-tree index)")
    ("wt-tree/rank" . "wt-tree/rank: (wt-tree key)")
    ("wt-tree/min" . "wt-tree/min: (wt-tree)")
    ("wt-tree/min-datum" . "wt-tree/min-datum: (wt-tree)")
    ("wt-tree/min-pair" . "wt-tree/min-pair: (wt-tree)")
    ("wt-tree/delete-min" . "wt-tree/delete-min: (wt-tree)")
    ("wt-tree/delete-min!" . "wt-tree/delete-min!: (wt-tree)")
    ("make-bit-string" . "make-bit-string: (k initialization)")
    ("bit-string-allocate" . "bit-string-allocate: (k)")
    ("bit-string-copy" . "bit-string-copy: (bit-string)")
    ("bit-string?" . "bit-string?: (object)")
    ("bit-string-length" . "bit-string-length: (bit-string)")
    ("bit-string-ref" . "bit-string-ref: (bit-string k)")
    ("bit-string-set!" . "bit-string-set!: (bit-string k)")
    ("bit-string-clear!" . "bit-string-clear!: (bit-string k)")
    ("bit-substring-find-next-set-bit" . "bit-substring-find-next-set-bit: (bit-string start end)")
    ("bit-string-append" . "bit-string-append: (bit-string-1 bit-string-2)")
    ("bit-substring" . "bit-substring: (bit-string start end)")
    ("bit-string-zero?" . "bit-string-zero?: (bit-string)")
    ("bit-string=?" . "bit-string=?: (bit-string-1 bit-string-2)")
    ("bit-string-not" . "bit-string-not: (bit-string)")
    ("bit-string-movec!" . "bit-string-movec!: (target-bit-string bit-string)")
    ("bit-string-and" . "bit-string-and: (bit-string-1 bit-string-2)")
    ("bit-string-andc" . "bit-string-andc: (bit-string-1 bit-string-2)")
    ("bit-string-or" . "bit-string-or: (bit-string-1 bit-string-2)")
    ("bit-string-xor" . "bit-string-xor: (bit-string-1 bit-string-2)")
    ("bit-string-and!" . "bit-string-and!: (target-bit-string bit-string)")
    ("bit-string-or!" . "bit-string-or!: (target-bit-string bit-string)")
    ("bit-string-xor!" . "bit-string-xor!: (target-bit-string bit-string)")
    ("bit-string-andc!" . "bit-string-andc!: (target-bit-string bit-string)")
    ("bit-string-fill!" . "bit-string-fill!: (bit-string initialization)")
    ("bit-string-move!" . "bit-string-move!: (target-bit-string bit-string)")
    ("bit-substring-move-right!" . "bit-substring-move-right!: (bit-string-1 start1 end1 bit-string-2 start2)")
    ("unsigned-integer->bit-string" . "unsigned-integer->bit-string: (length integer)")
    ("signed-integer->bit-string" . "signed-integer->bit-string: (length integer)")
    ("bit-string->unsigned-integer" . "bit-string->unsigned-integer: (bit-string)")
    ("bit-string->signed-integer" . "bit-string->signed-integer: (bit-string)")
    ("char->name" . "char->name: (char [slashify?])")
    ("name->char" . "name->char: (string)")
    ("char=?" . "char=?: (char1 char2)")
    ("char<?" . "char<?: (char1 char2)")
    ("char>?" . "char>?: (char1 char2)")
    ("char<=?" . "char<=?: (char1 char2)")
    ("char>=?" . "char>=?: (char1 char2)")
    ("char-ci=?" . "char-ci=?: (char1 char2)")
    ("char-ci<?" . "char-ci<?: (char1 char2)")
    ("char-ci>?" . "char-ci>?: (char1 char2)")
    ("char-ci<=?" . "char-ci<=?: (char1 char2)")
    ("char-ci>=?" . "char-ci>=?: (char1 char2)")
    ("char?" . "char?: (object)")
    ("char-upcase" . "char-upcase: (char)")
    ("char-downcase" . "char-downcase: (char)")
    ("char->digit" . "char->digit: (char [radix])")
    ("digit->char" . "digit->char: (digit [radix])")
    ("make-char" . "make-char: (code bucky-bits)")
    ("char-bits" . "char-bits: (char)")
    ("char-code" . "char-code: (char)")
    ("char->integer" . "char->integer: (char)")
    ("integer->char" . "integer->char: (k)")
    ("char-ascii?" . "char-ascii?: (char)")
    ("char->ascii" . "char->ascii: (char)")
    ("ascii->char" . "ascii->char: (code)")
    ("char-set?" . "char-set?: (object)")
    ("char-upper-case?" . "char-upper-case?: (char)")
    ("char-lower-case?" . "char-lower-case?: (char)")
    ("char-alphabetic?" . "char-alphabetic?: (char)")
    ("char-numeric?" . "char-numeric?: (char)")
    ("char-alphanumeric?" . "char-alphanumeric?: (char)")
    ("char-whitespace?" . "char-whitespace?: (char)")
    ("char-graphic?" . "char-graphic?: (char)")
    ("char-standard?" . "char-standard?: (object)")
    ("char-set-member?" . "char-set-member?: (char-set char)")
    ("char-set=?" . "char-set=?: (char-set-1 char-set-2)")
    ("char-set" . "char-set: (char ...)")
    ("chars->char-set" . "chars->char-set: (chars)")
    ("string->char-set" . "string->char-set: (string)")
    ("scalar-values->char-set" . "scalar-values->char-set: (items)")
    ("char-set->scalar-values" . "char-set->scalar-values: (char-set)")
    ("well-formed-scalar-values-list?" . "well-formed-scalar-values-list?: (object)")
    ("char-set-invert" . "char-set-invert: (char-set)")
    ("char-set-difference" . "char-set-difference: (char-set1 char-set ...)")
    ("char-set-intersection" . "char-set-intersection: (char-set ...)")
    ("char-set-union" . "char-set-union: (char-set ...)")
    ("8-bit-char-set?" . "8-bit-char-set?: (char-set)")
    ("ascii-range->char-set" . "ascii-range->char-set: (lower upper)")
    ("char-set-members" . "char-set-members: (char-set)")
    ("unicode-scalar-value?" . "unicode-scalar-value?: (object)")
    ("unicode-char?" . "unicode-char?: (object)")
    ("wide-string?" . "wide-string?: (object)")
    ("make-wide-string" . "make-wide-string: (k [unicode-char])")
    ("wide-string" . "wide-string: (unicode-char ...)")
    ("wide-string-length" . "wide-string-length: (wide-string)")
    ("wide-string-ref" . "wide-string-ref: (wide-string k)")
    ("wide-string-set!" . "wide-string-set!: (wide-string k unicode-char)")
    ("string->wide-string" . "string->wide-string: (string [start [end]])")
    ("wide-string->string" . "wide-string->string: (wide-string [start [end]])")
    ("open-wide-input-string" . "open-wide-input-string: (wide-string [start [end]])")
    ("open-wide-output-string" . "open-wide-output-string: ()")
    ("call-with-wide-output-string" . "call-with-wide-output-string: procedure")
    ("utf8-string->wide-string" . "utf8-string->wide-string: (string [start [end]])")
    ("utf16-be-string->wide-string" . "utf16-be-string->wide-string: (string [start [end]])")
    ("utf16-le-string->wide-string" . "utf16-le-string->wide-string: (string [start [end]])")
    ("utf16-string->wide-string" . "utf16-string->wide-string: (string [start [end]])")
    ("utf32-be-string->wide-string" . "utf32-be-string->wide-string: (string [start [end]])")
    ("utf32-le-string->wide-string" . "utf32-le-string->wide-string: (string [start [end]])")
    ("utf32-string->wide-string" . "utf32-string->wide-string: (string [start [end]])")
    ("utf8-string-length" . "utf8-string-length: (string [start [end]])")
    ("utf16-be-string-length" . "utf16-be-string-length: (string [start [end]])")
    ("utf16-le-string-length" . "utf16-le-string-length: (string [start [end]])")
    ("utf16-string-length" . "utf16-string-length: (string [start [end]])")
    ("utf32-be-string-length" . "utf32-be-string-length: (string [start [end]])")
    ("utf32-le-string-length" . "utf32-le-string-length: (string [start [end]])")
    ("utf32-string-length" . "utf32-string-length: (string [start [end]])")
    ("wide-string->utf8-string" . "wide-string->utf8-string: (string [start [end]])")
    ("wide-string->utf16-be-string" . "wide-string->utf16-be-string: (string [start [end]])")
    ("wide-string->utf16-le-string" . "wide-string->utf16-le-string: (string [start [end]])")
    ("wide-string->utf16-string" . "wide-string->utf16-string: (string [start [end]])")
    ("wide-string->utf32-be-string" . "wide-string->utf32-be-string: (string [start [end]])")
    ("wide-string->utf32-le-string" . "wide-string->utf32-le-string: (string [start [end]])")
    ("wide-string->utf32-string" . "wide-string->utf32-string: (string [start [end]])")
    ("environment?" . "environment?: (object)")
    ("environment-has-parent?" . "environment-has-parent?: (environment)")
    ("environment-parent" . "environment-parent: (environment)")
    ("environment-bound-names" . "environment-bound-names: (environment)")
    ("environment-macro-names" . "environment-macro-names: (environment)")
    ("environment-bindings" . "environment-bindings: (environment)")
    ("environment-reference-type" . "environment-reference-type: (environment symbol)")
    ("environment-bound?" . "environment-bound?: (environment symbol)")
    ("environment-assigned?" . "environment-assigned?: (environment symbol)")
    ("environment-lookup" . "environment-lookup: (environment symbol)")
    ("environment-lookup-macro" . "environment-lookup-macro: (environment symbol)")
    ("environment-assignable?" . "environment-assignable?: (environment symbol)")
    ("environment-assign!" . "environment-assign!: (environment symbol object)")
    ("environment-definable?" . "environment-definable?: (environment symbol)")
    ("environment-define" . "environment-define: (environment symbol object)")
    ("environment-define-macro" . "environment-define-macro: (environment symbol transformer)")
    ("eval" . "eval: (expression environment)")
    ("nearest-repl/environment" . "nearest-repl/environment: ()")
    ("ge" . "ge: environment")
    ("the-environment" . "the-environment: ()")
    ("top-level-environment?" . "top-level-environment?: object")
    ("interpreter-environment?" . "interpreter-environment?: (object)")
    ("extend-top-level-environment" . "extend-top-level-environment: (environment [names [values]])")
    ("make-top-level-environment" . "make-top-level-environment: ([names [values]])")
    ("make-root-top-level-environment" . "make-root-top-level-environment: ([names [values]])")
    ("link-variables" . "link-variables: (environment1 symbol1 environment2 symbol2)")
    ("unbind-variable" . "unbind-variable: (environment symbol)")
    ("eqv?" . "eqv?: (obj1 obj2)")
    ("eq?" . "eq?: (obj1 obj2)")
    ("equal?" . "equal?: (obj1 obj2)")
    ("error" . "error: (reason argument ...)")
    ("warn" . "warn: (reason argument ...)")
    ("signal-condition" . "signal-condition: (condition)")
    ("format-error-message" . "format-error-message: (message irritants port)")
    ("error-irritant/noise" . "error-irritant/noise: (value)")
    ("ignore-errors" . "ignore-errors: (thunk)")
    ("bind-condition-handler" . "bind-condition-handler: (condition-types handler thunk)")
    ("bind-default-condition-handler" . "bind-default-condition-handler: (condition-types handler)")
    ("break-on-signals" . "break-on-signals: (condition-types)")
    ("standard-error-handler" . "standard-error-handler: (condition)")
    ("standard-warning-handler" . "standard-warning-handler: (condition)")
    ("with-simple-restart" . "with-simple-restart: (name reporter thunk)")
    ("with-restart" . "with-restart: (name reporter effector interactor thunk)")
    ("abort" . "abort: ([restarts])")
    ("continue" . "continue: ([restarts])")
    ("muffle-warning" . "muffle-warning: ([restarts])")
    ("retry" . "retry: ([restarts])")
    ("store-value" . "store-value: (new-value [restarts])")
    ("use-value" . "use-value: (new-value [restarts])")
    ("bound-restarts" . "bound-restarts: ()")
    ("find-restart" . "find-restart: name [restarts]")
    ("invoke-restart" . "invoke-restart: (restart argument ...)")
    ("invoke-restart-interactively" . "invoke-restart-interactively: (restart)")
    ("restart?" . "restart?: (object)")
    ("restart/name" . "restart/name: (restart)")
    ("restart/effector" . "restart/effector: (restart)")
    ("restart/interactor" . "restart/interactor: (restart)")
    ("write-restart-report" . "write-restart-report: (restart port)")
    ("condition-constructor" . "condition-constructor: (condition-type field-names)")
    ("condition-accessor" . "condition-accessor: (condition-type field-name)")
    ("condition-predicate" . "condition-predicate: (condition-type)")
    ("condition-signaller" . "condition-signaller: (condition-type field-names default-handler)")
    ("condition?" . "condition?: (object)")
    ("condition/type" . "condition/type: (condition)")
    ("condition/error?" . "condition/error?: (condition)")
    ("condition/restarts" . "condition/restarts: (condition)")
    ("condition/continuation" . "condition/continuation: (condition)")
    ("write-condition-report" . "write-condition-report: (condition port)")
    ("make-condition" . "make-condition: (condition-type continuation restarts field-plist)")
    ("access-condition" . "access-condition: (condition field-name)")
    ("condition/report-string" . "condition/report-string: (condition)")
    ("make-condition-type" . "make-condition-type: (name generalization field-names reporter)")
    ("condition-type/error?" . "condition-type/error?: (condition-type)")
    ("condition-type/field-names" . "condition-type/field-names: (condition-type)")
    ("condition-type/generalizations" . "condition-type/generalizations: (condition-type)")
    ("condition-type?" . "condition-type?: (object)")
    ("condition-type:serious-condition" . "condition-type:serious-condition: ()")
    ("condition-type:error" . "condition-type:error: ()")
    ("condition-type:simple-error" . "condition-type:simple-error: (message irritants)")
    ("condition-type:illegal-datum" . "condition-type:illegal-datum: (datum)")
    ("condition-type:wrong-type-datum" . "condition-type:wrong-type-datum: (datum type)")
    ("error:wrong-type-datum" . "error:wrong-type-datum: (datum type)")
    ("condition-type:wrong-type-argument" . "condition-type:wrong-type-argument: (datum type operator operand)")
    ("error:wrong-type-argument" . "error:wrong-type-argument: (datum type operator)")
    ("condition-type:wrong-number-of-arguments" . "condition-type:wrong-number-of-arguments: (datum type operands)")
    ("error:wrong-number-of-arguments" . "error:wrong-number-of-arguments: (datum type operands)")
    ("condition-type:datum-out-of-range" . "condition-type:datum-out-of-range: (datum)")
    ("error:datum-out-of-range" . "error:datum-out-of-range: (datum)")
    ("condition-type:bad-range-argument" . "condition-type:bad-range-argument: (datum operator operand)")
    ("error:bad-range-argument" . "error:bad-range-argument: (datum operator)")
    ("condition-type:inapplicable-object" . "condition-type:inapplicable-object: (datum operands)")
    ("condition-type:file-error" . "condition-type:file-error: (filename)")
    ("condition-type:file-operation-error" . "condition-type:file-operation-error: (filename verb noun reason operator operands)")
    ("error:file-operation-error" . "error:file-operation-error: (filename verb noun reason operator operands)")
    ("condition-type:derived-file-error" . "condition-type:derived-file-error: (filename condition)")
    ("error:derived-file" . "error:derived-file: (filename condition)")
    ("condition-type:port-error" . "condition-type:port-error: (port)")
    ("condition-type:derived-port-error" . "condition-type:derived-port-error: (port condition)")
    ("error:derived-port" . "error:derived-port: (port condition)")
    ("condition-type:variable-error" . "condition-type:variable-error: (location environment)")
    ("condition-type:unbound-variable" . "condition-type:unbound-variable: (location environment)")
    ("condition-type:unassigned-variable" . "condition-type:unassigned-variable: (location environment)")
    ("condition-type:arithmetic-error" . "condition-type:arithmetic-error: (operator operands)")
    ("condition-type:divide-by-zero" . "condition-type:divide-by-zero: (operator operands)")
    ("error:divide-by-zero" . "error:divide-by-zero: (operator operands)")
    ("condition-type:floating-point-overflow" . "condition-type:floating-point-overflow: (operator operands)")
    ("condition-type:floating-point-underflow" . "condition-type:floating-point-underflow: (operator operands)")
    ("condition-type:primitive-procedure-error" . "condition-type:primitive-procedure-error: (operator operands)")
    ("condition-type:system-call-error" . "condition-type:system-call-error: (operator operands system-call error-type)")
    ("condition-type:control-error" . "condition-type:control-error: ()")
    ("condition-type:no-such-restart" . "condition-type:no-such-restart: (name)")
    ("error:no-such-restart" . "error:no-such-restart: (name)")
    ("condition-type:not-loading" . "condition-type:not-loading: ()")
    ("condition-type:warning" . "condition-type:warning: ()")
    ("condition-type:simple-warning" . "condition-type:simple-warning: (message irritants)")
    ("condition-type:simple-condition" . "condition-type:simple-condition: (message irritants)")
    ("condition-type:breakpoint" . "condition-type:breakpoint: (environment message prompt)")
    ("graphics-type-available?" . "graphics-type-available?: (graphics-device-type)")
    ("enumerate-graphics-types" . "enumerate-graphics-types: ()")
    ("make-graphics-device" . "make-graphics-device: graphics-device-type object ...")
    ("graphics-close" . "graphics-close: (graphics-device)")
    ("graphics-device-coordinate-limits" . "graphics-device-coordinate-limits: (graphics-device)")
    ("graphics-coordinate-limits" . "graphics-coordinate-limits: (graphics-device)")
    ("graphics-set-coordinate-limits" . "graphics-set-coordinate-limits: (graphics-device x-left y-bottom x-right y-top)")
    ("graphics-clear" . "graphics-clear: (graphics-device)")
    ("graphics-draw-point" . "graphics-draw-point: (graphics-device x y)")
    ("graphics-erase-point" . "graphics-erase-point: (graphics-device x y)")
    ("graphics-draw-line" . "graphics-draw-line: (graphics-device x-start y-start x-end y-end)")
    ("graphics-draw-text" . "graphics-draw-text: (graphics-device x y string)")
    ("graphics-move-cursor" . "graphics-move-cursor: (graphics-device x y)")
    ("graphics-drag-cursor" . "graphics-drag-cursor: (graphics-device x y)")
    ("graphics-bind-drawing-mode" . "graphics-bind-drawing-mode: (graphics-device drawing-mode thunk)")
    ("graphics-bind-line-style" . "graphics-bind-line-style: (graphics-device line-style thunk)")
    ("graphics-set-drawing-mode" . "graphics-set-drawing-mode: (graphics-device drawing-mode)")
    ("graphics-set-line-style" . "graphics-set-line-style: (graphics-device line-style)")
    ("graphics-enable-buffering" . "graphics-enable-buffering: (graphics-device)")
    ("graphics-disable-buffering" . "graphics-disable-buffering: (graphics-device)")
    ("graphics-flush" . "graphics-flush: (graphics-device)")
    ("graphics-set-clip-rectangle" . "graphics-set-clip-rectangle: (graphics-device x-left y-bottom x-right y-top)")
    ("graphics-reset-clip-rectangle" . "graphics-reset-clip-rectangle: (graphics-device)")
    ("graphics-operation" . "graphics-operation: (graphics-device name object ...)")
    ("image?" . "image?: (object)")
    ("image/destroy" . "image/destroy: (image)")
    ("image/height" . "image/height: (image)")
    ("image/width" . "image/width: (image)")
    ("image/fill-from-byte-vector" . "image/fill-from-byte-vector: (image bytes)")
    ("x-graphics/open-display" . "x-graphics/open-display: (display-name)")
    ("x-graphics/close-display" . "x-graphics/close-display: (display)")
    ("x-close-all-displays" . "x-close-all-displays: ()")
    ("x-geometry-string" . "x-geometry-string: x y width height")
    ("x-font-structure/name" . "x-font-structure/name: (font-structure)")
    ("x-font-structure/direction" . "x-font-structure/direction: (font-structure)")
    ("x-font-structure/all-chars-exist" . "x-font-structure/all-chars-exist: (font-structure)")
    ("x-font-structure/default-char" . "x-font-structure/default-char: (font-structure)")
    ("x-font-structure/min-bounds" . "x-font-structure/min-bounds: (font-structure)")
    ("x-font-structure/max-bounds" . "x-font-structure/max-bounds: (font-structure)")
    ("x-font-structure/start-index" . "x-font-structure/start-index: (font-structure)")
    ("x-font-structure/character-bounds" . "x-font-structure/character-bounds: (font-structure)")
    ("x-font-structure/max-ascent" . "x-font-structure/max-ascent: (font-structure)")
    ("x-font-structure/max-descent" . "x-font-structure/max-descent: (font-structure)")
    ("x-character-bounds/lbearing" . "x-character-bounds/lbearing: (character-bounds)")
    ("x-character-bounds/rbearing" . "x-character-bounds/rbearing: (character-bounds)")
    ("x-character-bounds/width" . "x-character-bounds/width: (character-bounds)")
    ("x-character-bounds/ascent" . "x-character-bounds/ascent: (character-bounds)")
    ("x-character-bounds/descent" . "x-character-bounds/descent: (character-bounds)")
    ("call-with-port" . "call-with-port: (port procedure)")
    ("call-with-truncated-output-port" . "call-with-truncated-output-port: (limit output-port procedure)")
    ("input-port?" . "input-port?: (object)")
    ("output-port?" . "output-port?: (object)")
    ("i/o-port?" . "i/o-port?: (object)")
    ("textual-port?" . "textual-port?: (object)")
    ("binary-port?" . "binary-port?: (object)")
    ("port?" . "port?: (object)")
    ("guarantee-port" . "guarantee-port: (object)")
    ("guarantee-input-port" . "guarantee-input-port: (object)")
    ("guarantee-output-port" . "guarantee-output-port: (object)")
    ("guarantee-i/o-port" . "guarantee-i/o-port: (object)")
    ("input-port-open?" . "input-port-open?: (port)")
    ("output-port-open?" . "output-port-open?: (port)")
    ("current-input-port" . "current-input-port: ([input-port])")
    ("current-output-port" . "current-output-port: ([output-port])")
    ("current-error-port" . "current-error-port: ([output-port])")
    ("notification-output-port" . "notification-output-port: ([output-port])")
    ("trace-output-port" . "trace-output-port: ([output-port])")
    ("interaction-i/o-port" . "interaction-i/o-port: ([i/o-port])")
    ("close-port" . "close-port: (port)")
    ("close-input-port" . "close-input-port: (port)")
    ("close-output-port" . "close-output-port: (port)")
    ("set-current-input-port!" . "set-current-input-port!: (input-port)")
    ("set-current-output-port!" . "set-current-output-port!: (output-port)")
    ("set-notification-output-port!" . "set-notification-output-port!: (output-port)")
    ("set-trace-output-port!" . "set-trace-output-port!: (output-port)")
    ("set-interaction-i/o-port!" . "set-interaction-i/o-port!: (i/o-port)")
    ("with-input-from-port" . "with-input-from-port: (input-port thunk)")
    ("with-output-to-port" . "with-output-to-port: (output-port thunk)")
    ("with-notification-output-port" . "with-notification-output-port: (output-port thunk)")
    ("with-trace-output-port" . "with-trace-output-port: (output-port thunk)")
    ("with-interaction-i/o-port" . "with-interaction-i/o-port: (i/o-port thunk)")
    ("call-with-input-file" . "call-with-input-file: (filename procedure)")
    ("call-with-output-file" . "call-with-output-file: (filename procedure)")
    ("call-with-binary-input-file" . "call-with-binary-input-file: (filename procedure)")
    ("call-with-binary-output-file" . "call-with-binary-output-file: (filename procedure)")
    ("with-input-from-file" . "with-input-from-file: (filename thunk)")
    ("with-output-to-file" . "with-output-to-file: (filename thunk)")
    ("with-input-from-binary-file" . "with-input-from-binary-file: (filename thunk)")
    ("with-output-to-binary-file" . "with-output-to-binary-file: (filename thunk)")
    ("open-input-file" . "open-input-file: (filename)")
    ("open-binary-input-file" . "open-binary-input-file: (filename)")
    ("open-output-file" . "open-output-file: (filename [append?])")
    ("open-binary-output-file" . "open-binary-output-file: (filename [append?])")
    ("open-i/o-file" . "open-i/o-file: (filename)")
    ("open-binary-i/o-file" . "open-binary-i/o-file: (filename)")
    ("close-all-open-files" . "close-all-open-files: ()")
    ("open-input-string" . "open-input-string: string [start [end]]")
    ("open-output-string" . "open-output-string: ()")
    ("get-output-string" . "get-output-string: port")
    ("call-with-output-string" . "call-with-output-string: (procedure)")
    ("call-with-truncated-output-string" . "call-with-truncated-output-string: (limit procedure)")
    ("write-to-string" . "write-to-string: (object [limit])")
    ("with-input-from-string" . "with-input-from-string: (string thunk)")
    ("with-output-to-string" . "with-output-to-string: (thunk)")
    ("with-output-to-truncated-string" . "with-output-to-truncated-string: (limit thunk)")
    ("open-input-bytevector" . "open-input-bytevector: (bytevector [start [end]])")
    ("open-output-bytevector" . "open-output-bytevector: ()")
    ("get-output-bytevector" . "get-output-bytevector: port")
    ("call-with-output-bytevector" . "call-with-output-bytevector: (procedure)")
    ("read" . "read: ([port [environment]])")
    ("read-char" . "read-char: ([port])")
    ("read-char-no-hang" . "read-char-no-hang: ([port])")
    ("unread-char" . "unread-char: (char [port])")
    ("peek-char" . "peek-char: ([port])")
    ("read-line" . "read-line: ([port])")
    ("eof-object?" . "eof-object?: (object)")
    ("eof-object" . "eof-object: ()")
    ("char-ready?" . "char-ready?: [port]")
    ("read-string" . "read-string: (k [port])")
    ("read-string!" . "read-string!: (string [port [start [end]]])")
    ("read-substring!" . "read-substring!: (string start end [port])")
    ("read-u8" . "read-u8: ([port])")
    ("peek-u8" . "peek-u8: ([port])")
    ("u8-ready?" . "u8-ready?: ([port])")
    ("read-bytevector" . "read-bytevector: (k [port])")
    ("read-bytevector!" . "read-bytevector!: (bytevector [port [start [end]]])")
    ("read-delimited-string" . "read-delimited-string: (char-set [port])")
    ("param:parser-radix" . "param:parser-radix: ()")
    ("param:parser-fold-case?" . "param:parser-fold-case?: ()")
    ("write" . "write: (object [port])")
    ("write-shared" . "write-shared: (object [port])")
    ("write-simple" . "write-simple: (object [port])")
    ("display" . "display: (object [port])")
    ("newline" . "newline: ([port])")
    ("write-char" . "write-char: (char [port])")
    ("write-string" . "write-string: (string [port [start [end]]])")
    ("write-substring" . "write-substring: (string start end [port])")
    ("write-u8" . "write-u8: (byte [port])")
    ("write-bytevector" . "write-bytevector: (bytevector [port [start [end]]])")
    ("flush-output-port" . "flush-output-port: ([port])")
    ("flush-output" . "flush-output: ([port])")
    ("fresh-line" . "fresh-line: ([port])")
    ("write-line" . "write-line: (object [port])")
    ("beep" . "beep: ([port])")
    ("clear" . "clear: ([port])")
    ("pp" . "pp: (object [port [as-code?]])")
    ("param:unparser-radix" . "param:unparser-radix: ()")
    ("param:unparser-list-breadth-limit" . "param:unparser-list-breadth-limit: ()")
    ("param:unparser-list-depth-limit" . "param:unparser-list-depth-limit: ()")
    ("param:unparser-string-length-limit" . "param:unparser-string-length-limit: ()")
    ("param:unparse-with-maximum-readability?" . "param:unparse-with-maximum-readability?: ()")
    ("input-port-blocking-mode" . "input-port-blocking-mode: input-port")
    ("output-port-blocking-mode" . "output-port-blocking-mode: (output-port)")
    ("set-input-port-blocking-mode!" . "set-input-port-blocking-mode!: (input-port mode)")
    ("set-output-port-blocking-mode" . "set-output-port-blocking-mode: (output-port mode)")
    ("with-input-port-blocking-mode" . "with-input-port-blocking-mode: (input-port mode thunk)")
    ("with-output-port-blocking-mode" . "with-output-port-blocking-mode: (output-port mode thunk)")
    ("port/input-blocking-mode" . "port/input-blocking-mode: (input-port)")
    ("port/set-input-blocking-mode" . "port/set-input-blocking-mode: (input-port mode)")
    ("port/with-input-blocking-mode" . "port/with-input-blocking-mode: (input-port mode thunk)")
    ("port/output-blocking-mode" . "port/output-blocking-mode: (output-port)")
    ("port/set-output-blocking-mode" . "port/set-output-blocking-mode: (output-port mode)")
    ("port/with-output-blocking-mode" . "port/with-output-blocking-mode: (output-port mode thunk)")
    ("input-port-terminal-mode" . "input-port-terminal-mode: (input-port)")
    ("output-port-terminal-mode" . "output-port-terminal-mode: (output-port)")
    ("set-input-port-terminal-mode!" . "set-input-port-terminal-mode!: (input-port mode)")
    ("set-output-port-terminal-mode!" . "set-output-port-terminal-mode!: (output-port mode)")
    ("with-input-port-terminal-mode" . "with-input-port-terminal-mode: (input-port mode thunk)")
    ("with-output-port-terminal-mode" . "with-output-port-terminal-mode: (output-port mode thunk)")
    ("port/input-terminal-mode" . "port/input-terminal-mode: (input-port)")
    ("port/set-input-terminal-mode" . "port/set-input-terminal-mode: (input-port mode)")
    ("port/with-input-terminal-mode" . "port/with-input-terminal-mode: (input-port mode thunk)")
    ("port/output-terminal-mode" . "port/output-terminal-mode: (output-port)")
    ("port/set-output-terminal-mode" . "port/set-output-terminal-mode: (output-port mode)")
    ("port/with-output-terminal-mode" . "port/with-output-terminal-mode: (output-port mode thunk)")
    ("format" . "format: (destination control-string argument ...)")
    ("set-record-type-unparser-method!" . "set-record-type-unparser-method!: (record-type unparser-method)")
    ("unparser/set-tagged-vector-method!" . "unparser/set-tagged-vector-method!: (tag unparser-method)")
    ("unparser/set-tagged-pair-method!" . "unparser/set-tagged-pair-method!: (tag unparser-method)")
    ("standard-unparser-method" . "standard-unparser-method: (name procedure)")
    ("with-current-unparser-state" . "with-current-unparser-state: (unparser-state procedure)")
    ("prompt-for-command-expression" . "prompt-for-command-expression: (prompt [port [environment]])")
    ("prompt-for-command-char" . "prompt-for-command-char: (prompt [port])")
    ("prompt-for-expression" . "prompt-for-expression: (prompt [port [environment]])")
    ("prompt-for-evaluated-expression" . "prompt-for-evaluated-expression: (prompt [environment [port]])")
    ("prompt-for-confirmation" . "prompt-for-confirmation: (prompt [port])")
    ("make-textual-port-type" . "make-textual-port-type: (operations port-type)")
    ("textual-port-type?" . "textual-port-type?: (object)")
    ("textual-input-port-type?" . "textual-input-port-type?: (object)")
    ("textual-output-port-type?" . "textual-output-port-type?: (object)")
    ("textual-i/o-port-type?" . "textual-i/o-port-type?: (object)")
    ("make-port-type" . "make-port-type: (operations port-type)")
    ("port-type?" . "port-type?: (object)")
    ("input-port-type?" . "input-port-type?: (object)")
    ("output-port-type?" . "output-port-type?: (object)")
    ("i/o-port-type?" . "i/o-port-type?: (object)")
    ("port-type/operations" . "port-type/operations: (port-type)")
    ("port-type/operation-names" . "port-type/operation-names: (port-type)")
    ("port-type/operation" . "port-type/operation: (port-type symbol)")
    ("make-textual-port" . "make-textual-port: (port-type state)")
    ("textual-port-type" . "textual-port-type: (textual-port)")
    ("textual-port-state" . "textual-port-state: (textual-port)")
    ("set-textual-port-state!" . "set-textual-port-state!: (textual-port object)")
    ("textual-port-operation" . "textual-port-operation: (textual-port symbol)")
    ("textual-port-operation-names" . "textual-port-operation-names: (textual-port)")
    ("make-port" . "make-port: (port-type state)")
    ("port/type" . "port/type: (textual-port)")
    ("port/state" . "port/state: (textual-port)")
    ("set-port/state!" . "set-port/state!: (textual-port object)")
    ("port/operation" . "port/operation: (textual-port symbol)")
    ("port/operation-names" . "port/operation-names: (port)")
    ("input-port/read-char" . "input-port/read-char: (textual-input-port)")
    ("input-port/peek-char" . "input-port/peek-char: (textual-input-port)")
    ("input-port/char-ready?" . "input-port/char-ready?: (textual-input-port k)")
    ("input-port/read-string" . "input-port/read-string: (textual-input-port char-set)")
    ("input-port/discard-chars" . "input-port/discard-chars: (textual-input-port char-set)")
    ("input-port/read-substring" . "input-port/read-substring: (textual-input-port string start end)")
    ("output-port/write-char" . "output-port/write-char: (textual-output-port char)")
    ("output-port/write-substring" . "output-port/write-substring: (textual-output-port string @)")
    ("output-port/fresh-line" . "output-port/fresh-line: (textual-output-port)")
    ("output-port/flush-output" . "output-port/flush-output: (textual-output-port)")
    ("output-port/discretionary-flush-output" . "output-port/discretionary-flush-output: (textual-output-port)")
    ("output-port/write-string" . "output-port/write-string: (textual-output-port string)")
    ("output-port/x-size" . "output-port/x-size: (textual-output-port)")
    ("output-port/y-size" . "output-port/y-size: (textual-output-port)")
    ("textual-input-port->parser-buffer" . "textual-input-port->parser-buffer: (textual-input-port)")
    ("input-port->parser-buffer" . "input-port->parser-buffer: (textual-input-port)")
    ("substring->parser-buffer" . "substring->parser-buffer: (string start end)")
    ("string->parser-buffer" . "string->parser-buffer: (string)")
    ("source->parser-buffer" . "source->parser-buffer: (source)")
    ("parser-buffer?" . "parser-buffer?: (object)")
    ("parser-buffer-pointer?" . "parser-buffer-pointer?: (object)")
    ("read-parser-buffer-char" . "read-parser-buffer-char: (buffer)")
    ("peek-parser-buffer-char" . "peek-parser-buffer-char: (buffer)")
    ("parser-buffer-ref" . "parser-buffer-ref: (buffer index)")
    ("get-parser-buffer-pointer" . "get-parser-buffer-pointer: (buffer)")
    ("set-parser-buffer-pointer!" . "set-parser-buffer-pointer!: (buffer pointer)")
    ("get-parser-buffer-tail" . "get-parser-buffer-tail: (buffer pointer)")
    ("discard-parser-buffer-head!" . "discard-parser-buffer-head!: (buffer)")
    ("match-parser-buffer-char" . "match-parser-buffer-char: (buffer char)")
    ("match-parser-buffer-char-ci" . "match-parser-buffer-char-ci: (buffer char)")
    ("match-parser-buffer-not-char" . "match-parser-buffer-not-char: (buffer char)")
    ("match-parser-buffer-not-char-ci" . "match-parser-buffer-not-char-ci: (buffer char)")
    ("match-parser-buffer-char-no-advance" . "match-parser-buffer-char-no-advance: (buffer char)")
    ("match-parser-buffer-char-ci-no-advance" . "match-parser-buffer-char-ci-no-advance: (buffer char)")
    ("match-parser-buffer-not-char-no-advance" . "match-parser-buffer-not-char-no-advance: (buffer char)")
    ("match-parser-buffer-not-char-ci-no-advance" . "match-parser-buffer-not-char-ci-no-advance: (buffer char)")
    ("match-parser-buffer-char-in-set" . "match-parser-buffer-char-in-set: (buffer char-set)")
    ("match-parser-buffer-char-in-set-no-advance" . "match-parser-buffer-char-in-set-no-advance: (buffer char-set)")
    ("match-parser-buffer-string" . "match-parser-buffer-string: (buffer string)")
    ("match-parser-buffer-string-ci" . "match-parser-buffer-string-ci: (buffer string)")
    ("match-parser-buffer-string-no-advance" . "match-parser-buffer-string-no-advance: (buffer string)")
    ("match-parser-buffer-string-ci-no-advance" . "match-parser-buffer-string-ci-no-advance: (buffer string)")
    ("match-parser-buffer-substring" . "match-parser-buffer-substring: (buffer string start end)")
    ("match-parser-buffer-substring-ci" . "match-parser-buffer-substring-ci: (buffer string start end)")
    ("match-parser-buffer-substring-no-advance" . "match-parser-buffer-substring-no-advance: (buffer string @)")
    ("match-parser-buffer-substring-ci-no-advance" . "match-parser-buffer-substring-ci-no-advance: (buffer string @)")
    ("parser-buffer-position-string" . "parser-buffer-position-string: (pointer)")
    ("parser-buffer-pointer-index" . "parser-buffer-pointer-index: (pointer)")
    ("parser-buffer-pointer-line" . "parser-buffer-pointer-line: (pointer)")
    ("*matcher" . "*matcher: (mexp)")
    ("char" . "char: (expression)")
    ("char-ci" . "char-ci: (expression)")
    ("not-char" . "not-char: (expression)")
    ("not-char-ci" . "not-char-ci: (expression)")
    ("string" . "string: (expression)")
    ("string-ci" . "string-ci: (expression)")
    ("char-set" . "char-set: (expression)")
    ("end-of-input" . "end-of-input: ()")
    ("discard-matched" . "discard-matched: ()")
    ("seq" . "seq: (mexp ...)")
    ("alt" . "alt: (mexp ...)")
    ("*" . "*: (mexp)")
    ("+" . "+: (mexp)")
    ("?" . "?: (mexp)")
    ("sexp" . "sexp: (expression)")
    ("with-pointer" . "with-pointer: (identifier mexp)")
    ("*parser" . "*parser: (pexp)")
    ("match" . "match: (mexp)")
    ("noise" . "noise: (mexp)")
    ("values" . "values: (expression ...)")
    ("discard-matched" . "discard-matched: ()")
    ("seq" . "seq: pexp ...")
    ("alt" . "alt: (pexp ...)")
    ("*" . "*: (pexp)")
    ("+" . "+: (pexp)")
    ("?" . "?: (pexp)")
    ("transform" . "transform: (expression pexp)")
    ("encapsulate" . "encapsulate: (expression pexp)")
    ("map" . "map: (expression pexp)")
    ("sexp" . "sexp: (expression)")
    ("with-pointer" . "with-pointer: (identifier pexp)")
    ("define-*matcher-macro" . "define-*matcher-macro: (formals expression)")
    ("define-*parser-macro" . "define-*parser-macro: (formals expression)")
    ("define-*matcher-expander" . "define-*matcher-expander: (identifier expander)")
    ("define-*parser-expander" . "define-*parser-expander: (identifier expander)")
    ("make-parser-macros" . "make-parser-macros: (parent-table)")
    ("parser-macros?" . "parser-macros?: (object)")
    ("global-parser-macros" . "global-parser-macros: ()")
    ("current-parser-macros" . "current-parser-macros: ()")
    ("set-current-parser-macros!" . "set-current-parser-macros!: (table)")
    ("with-current-parser-macros" . "with-current-parser-macros: (table thunk)")
    ("read-xml" . "read-xml: (port [pi-handlers])")
    ("read-xml-file" . "read-xml-file: (pathname [pi-handlers])")
    ("string->xml" . "string->xml: (string [start [end [pi-handlers]]])")
    ("write-xml" . "write-xml: (xml port)")
    ("write-xml-file" . "write-xml-file: (xml pathname)")
    ("xml->wide-string" . "xml->wide-string: (xml)")
    ("xml->string" . "xml->string: (xml)")
    ("make-xml-name" . "make-xml-name: (qname uri)")
    ("xml-name?" . "xml-name?: (object)")
    ("xml-name->symbol" . "xml-name->symbol: (xml-name)")
    ("xml-name-uri" . "xml-name-uri: (xml-name)")
    ("xml-name-string" . "xml-name-string: (xml-name)")
    ("xml-name-prefix" . "xml-name-prefix: (xml-name)")
    ("xml-name-local" . "xml-name-local: (xml-name)")
    ("xml-name=?" . "xml-name=?: (xml-name-1 xml-name-2)")
    ("make-xml-qname" . "make-xml-qname: (string)")
    ("xml-qname?" . "xml-qname?: (object)")
    ("xml-qname-prefix" . "xml-qname-prefix: (qname)")
    ("xml-qname-local" . "xml-qname-local: (qname)")
    ("null-xml-name-prefix" . "null-xml-name-prefix: ()")
    ("null-xml-name-prefix?" . "null-xml-name-prefix?: object")
    ("null-xml-namespace-uri" . "null-xml-namespace-uri: ()")
    ("null-xml-namespace-uri?" . "null-xml-namespace-uri?: object")
    ("make-xml-nmtoken" . "make-xml-nmtoken: (string)")
    ("xml-nmtoken?" . "xml-nmtoken?: (object)")
    ("string-is-xml-name?" . "string-is-xml-name?: (string)")
    ("string-is-xml-nmtoken?" . "string-is-xml-nmtoken?: (string)")
    ("pair?" . "pair?: (object)")
    ("cons" . "cons: (obj1 obj2)")
    ("xcons" . "xcons: (obj1 obj2)")
    ("car" . "car: (pair)")
    ("cdr" . "cdr: (pair)")
    ("car+cdr" . "car+cdr: (pair)")
    ("set-car!" . "set-car!: (pair object)")
    ("set-cdr!" . "set-cdr!: (pair object)")
    ("caar" . "caar: (pair)")
    ("cadr" . "cadr: (pair)")
    ("cdar" . "cdar: (pair)")
    ("cddr" . "cddr: (pair)")
    ("caaar" . "caaar: (pair)")
    ("caadr" . "caadr: (pair)")
    ("cadar" . "cadar: (pair)")
    ("caddr" . "caddr: (pair)")
    ("cdaar" . "cdaar: (pair)")
    ("cdadr" . "cdadr: (pair)")
    ("cddar" . "cddar: (pair)")
    ("cdddr" . "cdddr: (pair)")
    ("caaaar" . "caaaar: (pair)")
    ("caaadr" . "caaadr: (pair)")
    ("caadar" . "caadar: (pair)")
    ("caaddr" . "caaddr: (pair)")
    ("cadaar" . "cadaar: (pair)")
    ("cadadr" . "cadadr: (pair)")
    ("caddar" . "caddar: (pair)")
    ("cadddr" . "cadddr: (pair)")
    ("cdaaar" . "cdaaar: (pair)")
    ("cdaadr" . "cdaadr: (pair)")
    ("cdadar" . "cdadar: (pair)")
    ("cdaddr" . "cdaddr: (pair)")
    ("cddaar" . "cddaar: (pair)")
    ("cddadr" . "cddadr: (pair)")
    ("cdddar" . "cdddar: (pair)")
    ("cddddr" . "cddddr: (pair)")
    ("general-car-cdr" . "general-car-cdr: (object path)")
    ("tree-copy" . "tree-copy: (tree)")
    ("list" . "list: (object ...)")
    ("make-list" . "make-list: (k [element])")
    ("cons*" . "cons*: (object object ...)")
    ("list-tabulate" . "list-tabulate: (k init-proc)")
    ("make-initialized-list" . "make-initialized-list: (k init-proc)")
    ("list-copy" . "list-copy: (list)")
    ("iota" . "iota: (count [start [step]])")
    ("vector->list" . "vector->list: (vector)")
    ("subvector->list" . "subvector->list: (vector start end)")
    ("string->list" . "string->list: (string)")
    ("substring->list" . "substring->list: (string start end)")
    ("list?" . "list?: (object)")
    ("circular-list?" . "circular-list?: (object)")
    ("dotted-list?" . "dotted-list?: (object)")
    ("length" . "length: (list)")
    ("length+" . "length+: (clist)")
    ("null?" . "null?: (object)")
    ("list-ref" . "list-ref: (list k)")
    ("first" . "first: (list)")
    ("second" . "second: (list)")
    ("third" . "third: (list)")
    ("fourth" . "fourth: (list)")
    ("fifth" . "fifth: (list)")
    ("sixth" . "sixth: (list)")
    ("seventh" . "seventh: (list)")
    ("eighth" . "eighth: (list)")
    ("ninth" . "ninth: (list)")
    ("tenth" . "tenth: (list)")
    ("sublist" . "sublist: (list start end)")
    ("list-head" . "list-head: (list k)")
    ("list-tail" . "list-tail: (list k)")
    ("append" . "append: (list ...)")
    ("append!" . "append!: (list ...)")
    ("last-pair" . "last-pair: (list)")
    ("except-last-pair" . "except-last-pair: (list)")
    ("except-last-pair!" . "except-last-pair!: (list)")
    ("filter" . "filter: (predicate list)")
    ("remove" . "remove: (predicate list)")
    ("partition" . "partition: (predicate list)")
    ("filter!" . "filter!: (predicate list)")
    ("remove!" . "remove!: (predicate list)")
    ("partition!" . "partition!: (predicate list)")
    ("delq" . "delq: (element list)")
    ("delv" . "delv: (element list)")
    ("delete" . "delete: (element list)")
    ("delq!" . "delq!: (element list)")
    ("delv!" . "delv!: (element list)")
    ("delete!" . "delete!: (element list)")
    ("delete-member-procedure" . "delete-member-procedure: (deletor predicate)")
    ("list-deletor" . "list-deletor: (predicate)")
    ("list-deletor!" . "list-deletor!: (predicate)")
    ("find" . "find: (predicate list)")
    ("find-tail" . "find-tail: (predicate list)")
    ("memq" . "memq: (object list)")
    ("memv" . "memv: (object list)")
    ("member" . "member: (object list)")
    ("member-procedure" . "member-procedure: (predicate)")
    ("map" . "map: (procedure list list ...)")
    ("map*" . "map*: (initial-value procedure list1 list2 ...)")
    ("append-map" . "append-map: (procedure list list ...)")
    ("append-map*" . "append-map*: (initial-value procedure list list ...)")
    ("append-map!" . "append-map!: (procedure list list ...)")
    ("append-map*!" . "append-map*!: (initial-value procedure list list ...)")
    ("for-each" . "for-each: (procedure list list ...)")
    ("reduce-left" . "reduce-left: (procedure initial list)")
    ("reduce-right" . "reduce-right: (procedure initial list)")
    ("fold-right" . "fold-right: (procedure initial list)")
    ("fold-left" . "fold-left: (procedure initial list)")
    ("any" . "any: (predicate list list ...)")
    ("every" . "every: (predicate list list ...)")
    ("circular-list" . "circular-list: (object ...)")
    ("make-circular-list" . "make-circular-list: (k [element])")
    ("reverse" . "reverse: (list)")
    ("reverse!" . "reverse!: (list)")
    ("sort" . "sort: (sequence procedure)")
    ("merge-sort" . "merge-sort: (sequence procedure)")
    ("quick-sort" . "quick-sort: (sequence procedure)")
    ("boolean?" . "boolean?: (object)")
    ("not" . "not: (object)")
    ("false?" . "false?: (object)")
    ("boolean=?" . "boolean=?: (obj1 obj2)")
    ("boolean/and" . "boolean/and: (object ...)")
    ("boolean/or" . "boolean/or: (object ...)")
    ("symbol?" . "symbol?: (object)")
    ("symbol->string" . "symbol->string: (symbol)")
    ("intern" . "intern: (string)")
    ("intern-soft" . "intern-soft: (string)")
    ("string->symbol" . "string->symbol: (string)")
    ("string->uninterned-symbol" . "string->uninterned-symbol: (string)")
    ("generate-uninterned-symbol" . "generate-uninterned-symbol: ([object])")
    ("symbol-append" . "symbol-append: (symbol ...)")
    ("symbol-hash" . "symbol-hash: (symbol)")
    ("symbol-hash-mod" . "symbol-hash-mod: (symbol modulus)")
    ("symbol<?" . "symbol<?: (symbol1 symbol2)")
    ("make-parameter" . "make-parameter: (init [converter])")
    ("make-unsettable-parameter" . "make-unsettable-parameter: (init [converter])")
    ("make-settable-parameter" . "make-settable-parameter: (init [converter])")
    ("parameterize*" . "parameterize*: (bindings thunk)")
    ("cell?" . "cell?: (object)")
    ("make-cell" . "make-cell: (object)")
    ("cell-contents" . "cell-contents: (cell)")
    ("set-cell-contents!" . "set-cell-contents!: (cell object)")
    ("bind-cell-contents!" . "bind-cell-contents!: (cell object thunk)")
    ("make-record-type" . "make-record-type: (type-name field-names)")
    ("record-constructor" . "record-constructor: (record-type [field-names])")
    ("record-keyword-constructor" . "record-keyword-constructor: (record-type)")
    ("record-predicate" . "record-predicate: (record-type)")
    ("record-accessor" . "record-accessor: (record-type field-name)")
    ("record-modifier" . "record-modifier: (record-type field-name)")
    ("record?" . "record?: (object)")
    ("record-type-descriptor" . "record-type-descriptor: (record)")
    ("record-type?" . "record-type?: (object)")
    ("record-type-name" . "record-type-name: (record-type)")
    ("record-type-field-names" . "record-type-field-names: (record-type)")
    ("delay" . "delay: (expression)")
    ("force" . "force: (promise)")
    ("promise?" . "promise?: (object)")
    ("promise-forced?" . "promise-forced?: (promise)")
    ("promise-value" . "promise-value: (promise)")
    ("stream" . "stream: (object ...)")
    ("list->stream" . "list->stream: (list)")
    ("stream->list" . "stream->list: (stream)")
    ("cons-stream" . "cons-stream: (object expression)")
    ("stream-pair?" . "stream-pair?: (object)")
    ("stream-car" . "stream-car: (stream)")
    ("stream-first" . "stream-first: (stream)")
    ("stream-cdr" . "stream-cdr: (stream)")
    ("stream-rest" . "stream-rest: (stream)")
    ("stream-null?" . "stream-null?: (stream)")
    ("stream-length" . "stream-length: (stream)")
    ("stream-ref" . "stream-ref: (stream k)")
    ("stream-head" . "stream-head: (stream k)")
    ("stream-tail" . "stream-tail: (stream k)")
    ("stream-map" . "stream-map: (procedure stream stream ...)")
    ("weak-pair?" . "weak-pair?: (object)")
    ("weak-cons" . "weak-cons: (car cdr)")
    ("weak-pair/car?" . "weak-pair/car?: (weak-pair)")
    ("weak-car" . "weak-car: (weak-pair)")
    ("weak-set-car!" . "weak-set-car!: (weak-pair object)")
    ("weak-cdr" . "weak-cdr: (weak-pair)")
    ("weak-set-cdr!" . "weak-set-cdr!: (weak-pair object)")
    ("ephemeron?" . "ephemeron?: (object)")
    ("make-ephemeron" . "make-ephemeron: (key datum)")
    ("ephemeron-broken?" . "ephemeron-broken?: (ephemeron)")
    ("ephemeron-key" . "ephemeron-key: (ephemeron)")
    ("ephemeron-datum" . "ephemeron-datum: (ephemeron)")
    ("set-ephemeron-key!" . "set-ephemeron-key!: (ephemeron object)")
    ("set-ephemeron-datum!" . "set-ephemeron-datum!: (ephemeron object)")
    ("reference-barrier" . "reference-barrier: (object)")
    ("number?" . "number?: (object)")
    ("complex?" . "complex?: (object)")
    ("real?" . "real?: (object)")
    ("rational?" . "rational?: (object)")
    ("integer?" . "integer?: (object)")
    ("exact?" . "exact?: (z)")
    ("inexact?" . "inexact?: (z)")
    ("exact-integer?" . "exact-integer?: (object)")
    ("exact-nonnegative-integer?" . "exact-nonnegative-integer?: (object)")
    ("exact-rational?" . "exact-rational?: (object)")
    ("=" . "=: (z1 z2 z3 ...)")
    ("<" . "<: (x1 x2 x3 ...)")
    (">" . ">: (x1 x2 x3 ...)")
    ("<=" . "<=: (x1 x2 x3 ...)")
    (">=" . ">=: (x1 x2 x3 ...)")
    ("zero?" . "zero?: (z)")
    ("positive?" . "positive?: (x)")
    ("negative?" . "negative?: (x)")
    ("odd?" . "odd?: (x)")
    ("even?" . "even?: (x)")
    ("max" . "max: (x1 x2 ...)")
    ("min" . "min: (x1 x2 ...)")
    ("+" . "+: (z1 ...)")
    ("*" . "*: (z1 ...)")
    ("-" . "-: (z1 z2 ...)")
    ("/" . "/: (z1 z2 ...)")
    ("1+" . "1+: (z)")
    ("-1+" . "-1+: (z)")
    ("abs" . "abs: (x)")
    ("quotient" . "quotient: (n1 n2)")
    ("remainder" . "remainder: (n1 n2)")
    ("modulo" . "modulo: (n1 n2)")
    ("integer-floor" . "integer-floor: (n1 n2)")
    ("integer-ceiling" . "integer-ceiling: (n1 n2)")
    ("integer-truncate" . "integer-truncate: (n1 n2)")
    ("integer-round" . "integer-round: (n1 n2)")
    ("integer-divide" . "integer-divide: (n1 n2)")
    ("integer-divide-quotient" . "integer-divide-quotient: (qr)")
    ("integer-divide-remainder" . "integer-divide-remainder: (qr)")
    ("gcd" . "gcd: (n1 ...)")
    ("lcm" . "lcm: (n1 ...)")
    ("numerator" . "numerator: (q)")
    ("denominator" . "denominator: (q)")
    ("floor" . "floor: (x)")
    ("ceiling" . "ceiling: (x)")
    ("truncate" . "truncate: (x)")
    ("round" . "round: (x)")
    ("floor->exact" . "floor->exact: (x)")
    ("ceiling->exact" . "ceiling->exact: (x)")
    ("truncate->exact" . "truncate->exact: (x)")
    ("round->exact" . "round->exact: (x)")
    ("rationalize" . "rationalize: (x y)")
    ("rationalize->exact" . "rationalize->exact: (x y)")
    ("simplest-rational" . "simplest-rational: (x y)")
    ("simplest-exact-rational" . "simplest-exact-rational: (x y)")
    ("exp" . "exp: (z)")
    ("log" . "log: (z)")
    ("sin" . "sin: (z)")
    ("cos" . "cos: (z)")
    ("tan" . "tan: (z)")
    ("asin" . "asin: (z)")
    ("acos" . "acos: (z)")
    ("atan" . "atan: (z)")
    ("atan" . "atan: (y x)")
    ("sqrt" . "sqrt: (z)")
    ("expt" . "expt: (z1 z2)")
    ("make-rectangular" . "make-rectangular: (x1 x2)")
    ("make-polar" . "make-polar: (x3 x4)")
    ("real-part" . "real-part: (z)")
    ("imag-part" . "imag-part: (z)")
    ("magnitude" . "magnitude: (z)")
    ("angle" . "angle: (z)")
    ("conjugate" . "conjugate: (z)")
    ("inexact" . "inexact: (z)")
    ("exact->inexact" . "exact->inexact: (z)")
    ("inexact" . "inexact: (z)")
    ("exact->inexact" . "exact->inexact: (z)")
    ("number->string" . "number->string: (number [radix])")
    ("string->number" . "string->number: (string [radix])")
    ("fix:fixnum?" . "fix:fixnum?: (object)")
    ("fix:=" . "fix:=: (fixnum fixnum)")
    ("fix:<" . "fix:<: (fixnum fixnum)")
    ("fix:>" . "fix:>: (fixnum fixnum)")
    ("fix:<=" . "fix:<=: (fixnum fixnum)")
    ("fix:>=" . "fix:>=: (fixnum fixnum)")
    ("fix:zero?" . "fix:zero?: (fixnum)")
    ("fix:positive?" . "fix:positive?: (fixnum)")
    ("fix:negative?" . "fix:negative?: (fixnum)")
    ("fix:+" . "fix:+: (fixnum fixnum)")
    ("fix:-" . "fix:-: (fixnum fixnum)")
    ("fix:*" . "fix:*: (fixnum fixnum)")
    ("fix:quotient" . "fix:quotient: (fixnum fixnum)")
    ("fix:remainder" . "fix:remainder: (fixnum fixnum)")
    ("fix:gcd" . "fix:gcd: (fixnum fixnum)")
    ("fix:1+" . "fix:1+: (fixnum)")
    ("fix:-1+" . "fix:-1+: (fixnum)")
    ("fix:divide" . "fix:divide: (fixnum fixnum)")
    ("fix:not" . "fix:not: (fixnum)")
    ("fix:and" . "fix:and: (fixnum fixnum)")
    ("fix:andc" . "fix:andc: (fixnum fixnum)")
    ("fix:or" . "fix:or: (fixnum fixnum)")
    ("fix:xor" . "fix:xor: (fixnum fixnum)")
    ("fix:lsh" . "fix:lsh: (fixnum1 fixnum2)")
    ("flo:flonum?" . "flo:flonum?: (object)")
    ("flo:=" . "flo:=: (flonum1 flonum2)")
    ("flo:<" . "flo:<: (flonum1 flonum2)")
    ("flo:>" . "flo:>: (flonum1 flonum2)")
    ("flo:zero?" . "flo:zero?: (flonum)")
    ("flo:positive?" . "flo:positive?: (flonum)")
    ("flo:negative?" . "flo:negative?: (flonum)")
    ("flo:+" . "flo:+: (flonum1 flonum2)")
    ("flo:-" . "flo:-: (flonum1 flonum2)")
    ("flo:*" . "flo:*: (flonum1 flonum2)")
    ("flo:/" . "flo:/: (flonum1 flonum2)")
    ("flo:finite?" . "flo:finite?: (flonum)")
    ("flo:negate" . "flo:negate: (flonum)")
    ("flo:abs" . "flo:abs: (flonum)")
    ("flo:exp" . "flo:exp: (flonum)")
    ("flo:log" . "flo:log: (flonum)")
    ("flo:sin" . "flo:sin: (flonum)")
    ("flo:cos" . "flo:cos: (flonum)")
    ("flo:tan" . "flo:tan: (flonum)")
    ("flo:asin" . "flo:asin: (flonum)")
    ("flo:acos" . "flo:acos: (flonum)")
    ("flo:atan" . "flo:atan: (flonum)")
    ("flo:sqrt" . "flo:sqrt: (flonum)")
    ("flo:expt" . "flo:expt: (flonum1 flonum2)")
    ("flo:floor" . "flo:floor: (flonum)")
    ("flo:ceiling" . "flo:ceiling: (flonum)")
    ("flo:truncate" . "flo:truncate: (flonum)")
    ("flo:round" . "flo:round: (flonum)")
    ("flo:floor->exact" . "flo:floor->exact: (flonum)")
    ("flo:ceiling->exact" . "flo:ceiling->exact: (flonum)")
    ("flo:truncate->exact" . "flo:truncate->exact: (flonum)")
    ("flo:round->exact" . "flo:round->exact: (flonum)")
    ("flo:atan2" . "flo:atan2: (flonum1 flonum2)")
    ("random" . "random: (modulus [state])")
    ("flo:random-unit" . "flo:random-unit: (state)")
    ("make-random-state" . "make-random-state: ([state])")
    ("random-state?" . "random-state?: (object)")
    ("->pathname" . "->pathname: (object)")
    ("parse-namestring" . "parse-namestring: (thing [host [defaults]])")
    ("->namestring" . "->namestring: (pathname)")
    ("pathname-simplify" . "pathname-simplify: (pathname)")
    ("make-pathname" . "make-pathname: (host device directory name type version)")
    ("pathname-host" . "pathname-host: (pathname)")
    ("pathname-device" . "pathname-device: (pathname)")
    ("pathname-directory" . "pathname-directory: (pathname)")
    ("pathname-name" . "pathname-name: (pathname)")
    ("pathname-type" . "pathname-type: (pathname)")
    ("pathname-version" . "pathname-version: (pathname)")
    ("pathname-new-device" . "pathname-new-device: (pathname device)")
    ("pathname-new-directory" . "pathname-new-directory: (pathname directory)")
    ("pathname-new-name" . "pathname-new-name: (pathname name)")
    ("pathname-new-type" . "pathname-new-type: (pathname type)")
    ("pathname-new-version" . "pathname-new-version: (pathname version)")
    ("pathname-default-device" . "pathname-default-device: (pathname device)")
    ("pathname-default-directory" . "pathname-default-directory: (pathname directory)")
    ("pathname-default-name" . "pathname-default-name: (pathname name)")
    ("pathname-default-type" . "pathname-default-type: (pathname type)")
    ("pathname-default-version" . "pathname-default-version: (pathname version)")
    ("pathname?" . "pathname?: (object)")
    ("pathname=?" . "pathname=?: (pathname1 pathname2)")
    ("pathname-absolute?" . "pathname-absolute?: (pathname)")
    ("directory-pathname?" . "directory-pathname?: (pathname)")
    ("pathname-wild?" . "pathname-wild?: (pathname)")
    ("merge-pathnames" . "merge-pathnames: (pathname [defaults [default-version]])")
    ("pathname-default" . "pathname-default: (pathname device directory name type version)")
    ("file-namestring" . "file-namestring: (pathname)")
    ("directory-namestring" . "directory-namestring: (pathname)")
    ("host-namestring" . "host-namestring: (pathname)")
    ("enough-namestring" . "enough-namestring: (pathname [defaults])")
    ("file-pathname" . "file-pathname: (pathname)")
    ("directory-pathname" . "directory-pathname: (pathname)")
    ("enough-pathname" . "enough-pathname: (pathname [defaults])")
    ("directory-pathname-as-file" . "directory-pathname-as-file: (pathname)")
    ("pathname-as-directory" . "pathname-as-directory: (pathname)")
    ("host?" . "host?: (object)")
    ("host=?" . "host=?: (host1 host2)")
    ("init-file-pathname" . "init-file-pathname: ([host])")
    ("user-homedir-pathname" . "user-homedir-pathname: ([host])")
    ("system-library-pathname" . "system-library-pathname: (pathname)")
    ("system-library-directory-pathname" . "system-library-directory-pathname: (pathname)")
    ("working-directory-pathname" . "working-directory-pathname: ()")
    ("pwd" . "pwd: ()")
    ("set-working-directory-pathname!" . "set-working-directory-pathname!: (filename)")
    ("cd" . "cd: (filename)")
    ("with-working-directory-pathname" . "with-working-directory-pathname: (filename thunk)")
    ("file-exists?" . "file-exists?: (filename)")
    ("file-exists-direct?" . "file-exists-direct?: (filename)")
    ("file-exists-indirect?" . "file-exists-indirect?: (filename)")
    ("copy-file" . "copy-file: (source-filename target-filename)")
    ("rename-file" . "rename-file: (source-filename target-filename)")
    ("delete-file" . "delete-file: (filename)")
    ("delete-file-no-errors" . "delete-file-no-errors: (filename)")
    ("hard-link-file" . "hard-link-file: (source-filename target-filename)")
    ("soft-link-file" . "soft-link-file: (source-filename target-filename)")
    ("make-directory" . "make-directory: (filename)")
    ("delete-directory" . "delete-directory: (filename)")
    ("->truename" . "->truename: (filename)")
    ("call-with-temporary-file-pathname" . "call-with-temporary-file-pathname: (procedure)")
    ("temporary-file-pathname" . "temporary-file-pathname: ([directory])")
    ("temporary-directory-pathname" . "temporary-directory-pathname: ()")
    ("file-directory?" . "file-directory?: filename")
    ("file-regular?" . "file-regular?: (filename)")
    ("file-symbolic-link?" . "file-symbolic-link?: (filename)")
    ("file-type-direct" . "file-type-direct: (filename)")
    ("file-type-indirect" . "file-type-indirect: (filename)")
    ("file-readable?" . "file-readable?: (filename)")
    ("file-writeable?" . "file-writeable?: (filename)")
    ("file-executable?" . "file-executable?: (filename)")
    ("file-access" . "file-access: (filename mode)")
    ("file-eq?" . "file-eq?: (filename1 filename2)")
    ("file-modes" . "file-modes: (filename)")
    ("set-file-modes!" . "set-file-modes!: (filename modes)")
    ("file-modification-time" . "file-modification-time: (filename)")
    ("file-access-time" . "file-access-time: (filename)")
    ("set-file-times!" . "set-file-times!: (filename access-time modification-time)")
    ("current-file-time" . "current-file-time: ()")
    ("file-touch" . "file-touch: filename")
    ("file-length" . "file-length: (filename)")
    ("file-attributes" . "file-attributes: (filename)")
    ("file-attributes/type" . "file-attributes/type: (attributes)")
    ("file-attributes/access-time" . "file-attributes/access-time: (attributes)")
    ("file-attributes/modification-time" . "file-attributes/modification-time: (attributes)")
    ("file-attributes/change-time" . "file-attributes/change-time: (attributes)")
    ("file-attributes/length" . "file-attributes/length: (attributes)")
    ("file-attributes/mode-string" . "file-attributes/mode-string: (attributes)")
    ("file-attributes/n-links" . "file-attributes/n-links: (attributes)")
    ("file-attributes/uid" . "file-attributes/uid: (attributes)")
    ("file-attributes/gid" . "file-attributes/gid: (attributes)")
    ("file-attributes/inode-number" . "file-attributes/inode-number: (attributes)")
    ("file-attributes/modes" . "file-attributes/modes: (attributes)")
    ("directory-read" . "directory-read: (directory [sort?])")
    ("get-universal-time" . "get-universal-time: ()")
    ("local-decoded-time" . "local-decoded-time: ()")
    ("global-decoded-time" . "global-decoded-time: ()")
    ("make-decoded-time" . "make-decoded-time: second minute hour day month year [zone]")
    ("decoded-time/second" . "decoded-time/second: (decoded-time)")
    ("decoded-time/minute" . "decoded-time/minute: (decoded-time)")
    ("decoded-time/hour" . "decoded-time/hour: (decoded-time)")
    ("decoded-time/day" . "decoded-time/day: (decoded-time)")
    ("decoded-time/month" . "decoded-time/month: (decoded-time)")
    ("decoded-time/year" . "decoded-time/year: (decoded-time)")
    ("decoded-time/day-of-week" . "decoded-time/day-of-week: (decoded-time)")
    ("decoded-time/daylight-savings-time?" . "decoded-time/daylight-savings-time?: (decoded-time)")
    ("decoded-time/zone" . "decoded-time/zone: (decoded-time)")
    ("time-zone?" . "time-zone?: (object)")
    ("month/max-days" . "month/max-days: (month)")
    ("universal-time->local-decoded-time" . "universal-time->local-decoded-time: (universal-time)")
    ("universal-time->global-decoded-time" . "universal-time->global-decoded-time: (universal-time)")
    ("universal-time->file-time" . "universal-time->file-time: (universal-time)")
    ("universal-time->local-time-string" . "universal-time->local-time-string: (universal-time)")
    ("universal-time->global-time-string" . "universal-time->global-time-string: (universal-time)")
    ("decoded-time->universal-time" . "decoded-time->universal-time: (decoded-time)")
    ("decoded-time->file-time" . "decoded-time->file-time: (decoded-time)")
    ("decoded-time->string" . "decoded-time->string: (decoded-time)")
    ("file-time->universal-time" . "file-time->universal-time: (file-time)")
    ("file-time->local-decoded-time" . "file-time->local-decoded-time: (file-time)")
    ("file-time->global-decoded-time" . "file-time->global-decoded-time: (file-time)")
    ("file-time->local-time-string" . "file-time->local-time-string: (file-time)")
    ("file-time->global-time-string" . "file-time->global-time-string: (file-time)")
    ("string->universal-time" . "string->universal-time: (time-string)")
    ("string->decoded-time" . "string->decoded-time: (time-string)")
    ("string->file-time" . "string->file-time: (time-string)")
    ("decoded-time/date-string" . "decoded-time/date-string: (decoded-time)")
    ("decoded-time/time-string" . "decoded-time/time-string: (decoded-time)")
    ("day-of-week/long-string" . "day-of-week/long-string: (day-of-week)")
    ("day-of-week/short-string" . "day-of-week/short-string: (day-of-week)")
    ("month/long-string" . "month/long-string: (month)")
    ("month/short-string" . "month/short-string: (month)")
    ("time-zone->string" . "time-zone->string: ()")
    ("process-time-clock" . "process-time-clock: ()")
    ("real-time-clock" . "real-time-clock: ()")
    ("internal-time/ticks->seconds" . "internal-time/ticks->seconds: ticks")
    ("internal-time/seconds->ticks" . "internal-time/seconds->ticks: (seconds)")
    ("system-clock" . "system-clock: ()")
    ("runtime" . "runtime: ()")
    ("with-timings" . "with-timings: (thunk receiver)")
    ("measure-interval" . "measure-interval: (runtime? procedure)")
    ("run-shell-command" . "run-shell-command: (command option ...)")
    ("run-synchronous-subprocess" . "run-synchronous-subprocess: (program arguments option ...)")
    ("condition-type:subprocess-signalled" . "condition-type:subprocess-signalled: (subprocess reason)")
    ("condition-type:subprocess-stopped" . "condition-type:subprocess-stopped: (subprocess reason)")
    ("condition-type:subprocess-abnormal-termination" . "condition-type:subprocess-abnormal-termination: (subprocess reason)")
    ("input" . "input: (port)")
    ("input-line-translation" . "input-line-translation: (line-ending)")
    ("input-buffer-size" . "input-buffer-size: (n)")
    ("output" . "output: (port)")
    ("output-line-translation" . "output-line-translation: (line-ending)")
    ("output-buffer-size" . "output-buffer-size: (n)")
    ("redisplay-hook" . "redisplay-hook: (thunk)")
    ("environment" . "environment: (environment)")
    ("working-directory" . "working-directory: (pathname)")
    ("use-pty?" . "use-pty?: (boolean)")
    ("shell-file-name" . "shell-file-name: (pathname)")
    ("open-tcp-stream-socket" . "open-tcp-stream-socket: (host-name service)")
    ("open-tcp-server-socket" . "open-tcp-server-socket: (service [address])")
    ("tcp-server-connection-accept" . "tcp-server-connection-accept: (server-socket block? peer-address [line-translation])")
    ("close-tcp-server-socket" . "close-tcp-server-socket: (server-socket)")
    ("get-host-by-name" . "get-host-by-name: (host-name)")
    ("get-host-by-address" . "get-host-by-address: (ip-address)")
    ("canonical-host-name" . "canonical-host-name: (host-name)")
    ("get-host-name" . "get-host-name: ()")
    ("os/hostname" . "os/hostname: ()")
    ("allocate-host-address" . "allocate-host-address: ()")
    ("host-address-any" . "host-address-any: ()")
    ("host-address-loopback" . "host-address-loopback: ()")
    ("template" . "")
    (": ()")
    ("" . "type: condition-type:no-applicable-methods operator operands")
    ("condition-type:extra-applicable-methods" . "condition-type:extra-applicable-methods: (operator operands)")
    ("add-generic-procedure-generator" . "add-generic-procedure-generator: (generic generator)")
    ("remove-generic-procedure-generator" . "remove-generic-procedure-generator: (generic generator)")
    ("remove-generic-procedure-generators" . "remove-generic-procedure-generators: (generic tags)")
    ("generic-procedure-generator-list" . "generic-procedure-generator-list: (generic)")
    ("generic-procedure-default-generator" . "generic-procedure-default-generator: (generic)")
    ("set-generic-procedure-default-generator!" . "set-generic-procedure-default-generator!: (generic generator)")
    ("dispatch-tag" . "dispatch-tag: (object)")
    ("built-in-dispatch-tag" . "built-in-dispatch-tag: (name)")
    ("built-in-dispatch-tags" . "built-in-dispatch-tags: ()")
    ("record-type-dispatch-tag" . "record-type-dispatch-tag: record-type")
    ("dispatch-tag?" . "dispatch-tag?: (object)")
    ("guarantee-dispatch-tag" . "guarantee-dispatch-tag: (object caller)")
    ("lambda" . "lambda: (formals expression expression ...)")
    ("named-lambda" . "named-lambda: (formals expression expression ...)")
    ("let" . "let: (((variable init) ...) expression expression ...)")
    ("let*" . "let*: (((variable init) ...) expression expression ...)")
    ("letrec" . "letrec: (((variable init) ...) expression expression ...)")
    ("parameterize" . "parameterize: (((parameter value) ...) expression expression ...)")
    ("fluid-let" . "fluid-let: (((variable init) ...) expression expression ...)")
    ("define" . "define: (variable [expression])")
    ("define" . "define: (formals expression expression ...)")
    ("set!" . "set!: (variable [expression])")
    ("quote" . "quote: (datum)")
    ("quasiquote" . "quasiquote: (template)")
    ("if" . "if: (predicate consequent [alternative])")
    ("cond" . "cond: (clause clause ...)")
    ("case" . "case: (key clause clause ...)")
    ("and" . "and: (expression ...)")
    ("or" . "or: (expression ...)")
    ("begin" . "begin: (expression expression ...)")
    ("let" . "let: (name ((variable init) ...) expression expression ...)")
    ("do" . "do: (((variable init step) ...) (test expression ...) command ...)")
    ("define-structure" . "define-structure: ((name structure-option ...) slot-description ...)")
    ("read-only" . "read-only: (value)")
    ("type" . "type: (type-descriptor)")
    ("predicate" . "predicate: ([name])")
    ("copier" . "copier: ([name])")
    ("print-procedure" . "print-procedure: (expression)")
    ("constructor" . "constructor: ([name [argument-list]])")
    ("keyword-constructor" . "keyword-constructor: ([name])")
    ("type-descriptor" . "type-descriptor: (name)")
    ("conc-name" . "conc-name: ([name])")
    ("type" . "type: (representation-type)")
    ("named" . "named: ([expression])")
    ("safe-accessors" . "safe-accessors: ([boolean])")
    ("initial-offset" . "initial-offset: (offset)")
    ("let-syntax" . "let-syntax: (bindings expression expression ...)")
    ("letrec-syntax" . "letrec-syntax: (bindings expression expression ...)")
    ("let*-syntax" . "let*-syntax: (bindings expression expression ...)")
    ("define-syntax" . "define-syntax: (keyword transformer-spec)")
    ("syntax-rules" . "syntax-rules: (literals syntax-rule ...)")
    ("sc-macro-transformer" . "sc-macro-transformer: (expression)")
    ("rsc-macro-transformer" . "rsc-macro-transformer: (expression)")
    ("make-syntactic-closure" . "make-syntactic-closure: (environment free-names form)")
    ("close-syntax" . "close-syntax: (form environment)")
    ("capture-syntactic-environment" . "capture-syntactic-environment: (procedure)")
    ("identifier?" . "identifier?: (object)")
    ("identifier=?" . "identifier=?: (environment1 identifier1 environment2 identifier2)")
    ("make-synthetic-identifier" . "make-synthetic-identifier: (identifier)")
    ("er-macro-transformer" . "er-macro-transformer: (expression)")
    ("cond-expand" . "cond-expand: (clause clause ...)")
    ("receive" . "receive: (formals expression body)")
    ("and-let*" . "and-let*: ((clause ...) body)")
    ("define-record-type" . "define-record-type: (type-name (constructor-name field-tag ...) predicate-name field-spec ...)")
    ("make-string" . "make-string: (k [char])")
    ("string" . "string: (char ...)")
    ("list->string" . "list->string: (char-list)")
    ("string-copy" . "string-copy: (string)")
    ("string?" . "string?: (object)")
    ("string-length" . "string-length: (string)")
    ("string-null?" . "string-null?: (string)")
    ("string-ref" . "string-ref: (string k)")
    ("string-set!" . "string-set!: (string k char)")
    ("string=?" . "string=?: (string1 string2)")
    ("substring=?" . "substring=?: (string1 start end string2 start end)")
    ("string-ci=?" . "string-ci=?: (string1 string2)")
    ("substring-ci=?" . "substring-ci=?: (string1 start end string2 start end)")
    ("string<?" . "string<?: (string1 string2)")
    ("substring<?" . "substring<?: (string1 start1 end1 string2 start2 end2)")
    ("string>?" . "string>?: (string1 string2)")
    ("string<=?" . "string<=?: (string1 string2)")
    ("string>=?" . "string>=?: (string1 string2)")
    ("string-ci<?" . "string-ci<?: (string1 string2)")
    ("substring-ci<?" . "substring-ci<?: (string1 start1 end1 string2 start2 end2)")
    ("string-ci>?" . "string-ci>?: (string1 string2)")
    ("string-ci<=?" . "string-ci<=?: (string1 string2)")
    ("string-ci>=?" . "string-ci>=?: (string1 string2)")
    ("string-compare" . "string-compare: (string1 string2 if-eq if-lt if-gt)")
    ("string-compare-ci" . "string-compare-ci: (string1 string2 if-eq if-lt if-gt)")
    ("string-hash" . "string-hash: (string)")
    ("string-hash-mod" . "string-hash-mod: (string k)")
    ("string-capitalized?" . "string-capitalized?: (string)")
    ("substring-capitalized?" . "substring-capitalized?: (string start end)")
    ("string-upper-case?" . "string-upper-case?: (string)")
    ("substring-upper-case?" . "substring-upper-case?: (string start end)")
    ("string-lower-case?" . "string-lower-case?: (string)")
    ("substring-lower-case?" . "substring-lower-case?: (string start end)")
    ("string-capitalize" . "string-capitalize: (string)")
    ("string-capitalize!" . "string-capitalize!: (string)")
    ("substring-capitalize!" . "substring-capitalize!: (string start end)")
    ("string-downcase" . "string-downcase: (string)")
    ("string-downcase!" . "string-downcase!: (string)")
    ("substring-downcase!" . "substring-downcase!: (string start end)")
    ("string-upcase" . "string-upcase: (string)")
    ("string-upcase!" . "string-upcase!: (string)")
    ("substring-upcase!" . "substring-upcase!: (string start end)")
    ("string-append" . "string-append: (string ...)")
    ("substring" . "substring: (string start end)")
    ("string-head" . "string-head: (string end)")
    ("string-tail" . "string-tail: (string start)")
    ("string-pad-left" . "string-pad-left: (string k [char])")
    ("string-pad-right" . "string-pad-right: (string k [char])")
    ("string-trim" . "string-trim: (string [char-set])")
    ("string-trim-left" . "string-trim-left: (string [char-set])")
    ("string-trim-right" . "string-trim-right: (string [char-set])")
    ("string-search-forward" . "string-search-forward: (pattern string)")
    ("substring-search-forward" . "substring-search-forward: (pattern string start end)")
    ("string-search-backward" . "string-search-backward: (pattern string)")
    ("substring-search-backward" . "substring-search-backward: (pattern string start end)")
    ("string-search-all" . "string-search-all: (pattern string)")
    ("substring-search-all" . "substring-search-all: (pattern string start end)")
    ("substring?" . "substring?: (pattern string)")
    ("string-find-next-char" . "string-find-next-char: (string char)")
    ("substring-find-next-char" . "substring-find-next-char: (string start end char)")
    ("string-find-next-char-ci" . "string-find-next-char-ci: (string char)")
    ("substring-find-next-char-ci" . "substring-find-next-char-ci: (string start end char)")
    ("string-find-next-char-in-set" . "string-find-next-char-in-set: (string char-set)")
    ("substring-find-next-char-in-set" . "substring-find-next-char-in-set: (string start end char-set)")
    ("string-find-previous-char" . "string-find-previous-char: (string char)")
    ("substring-find-previous-char" . "substring-find-previous-char: (string start end char)")
    ("string-find-previous-char-ci" . "string-find-previous-char-ci: (string char)")
    ("substring-find-previous-char-ci" . "substring-find-previous-char-ci: (string start end char)")
    ("string-find-previous-char-in-set" . "string-find-previous-char-in-set: (string char-set)")
    ("substring-find-previous-char-in-set" . "substring-find-previous-char-in-set: (string start end char-set)")
    ("string-match-forward" . "string-match-forward: (string1 string2)")
    ("substring-match-forward" . "substring-match-forward: (string1 start end string2 start end)")
    ("string-match-forward-ci" . "string-match-forward-ci: (string1 string2)")
    ("substring-match-forward-ci" . "substring-match-forward-ci: (string1 start end string2 start end)")
    ("string-match-backward" . "string-match-backward: (string1 string2)")
    ("substring-match-backward" . "substring-match-backward: (string1 start end string2 start end)")
    ("string-match-backward-ci" . "string-match-backward-ci: (string1 string2)")
    ("substring-match-backward-ci" . "substring-match-backward-ci: (string1 start end string2 start end)")
    ("string-prefix?" . "string-prefix?: (string1 string2)")
    ("substring-prefix?" . "substring-prefix?: (string1 start1 end1 string2 start2 end2)")
    ("string-prefix-ci?" . "string-prefix-ci?: (string1 string2)")
    ("substring-prefix-ci?" . "substring-prefix-ci?: (string1 start1 end1 string2 start2 end2)")
    ("string-suffix?" . "string-suffix?: (string1 string2)")
    ("substring-suffix?" . "substring-suffix?: (string1 start1 end1 string2 start2 end2)")
    ("string-suffix-ci?" . "string-suffix-ci?: (string1 string2)")
    ("substring-suffix-ci?" . "substring-suffix-ci?: (string1 start1 end1 string2 start2 end2)")
    ("re-string-match" . "re-string-match: (regexp string [case-fold? [syntax-table]])")
    ("re-substring-match" . "re-substring-match: (regexp string start end [case-fold? [syntax-table]])")
    ("re-string-search-forward" . "re-string-search-forward: (regexp string [case-fold? [syntax-table]])")
    ("re-substring-search-forward" . "re-substring-search-forward: (regexp string start end [case-fold? [syntax-table]])")
    ("re-string-search-backward" . "re-string-search-backward: (regexp string [case-fold? [syntax-table]])")
    ("re-substring-search-backward" . "re-substring-search-backward: (regexp string start end [case-fold? [syntax-table]])")
    ("re-match-start-index" . "re-match-start-index: (n registers)")
    ("re-match-end-index" . "re-match-end-index: (n registers)")
    ("re-match-extract" . "re-match-extract: (string registers n)")
    ("regexp-group" . "regexp-group: (alternative ...)")
    ("re-compile-pattern" . "re-compile-pattern: (regexp-string)")
    ("rexp?" . "rexp?: (object)")
    ("rexp->regexp" . "rexp->regexp: (rexp)")
    ("rexp-compile" . "rexp-compile: (rexp)")
    ("rexp-any-char" . "rexp-any-char: ()")
    ("rexp-line-start" . "rexp-line-start: ()")
    ("rexp-line-end" . "rexp-line-end: ()")
    ("rexp-string-start" . "rexp-string-start: ()")
    ("rexp-string-end" . "rexp-string-end: ()")
    ("rexp-word-edge" . "rexp-word-edge: ()")
    ("rexp-not-word-edge" . "rexp-not-word-edge: ()")
    ("rexp-word-start" . "rexp-word-start: ()")
    ("rexp-word-end" . "rexp-word-end: ()")
    ("rexp-word-char" . "rexp-word-char: ()")
    ("rexp-not-word-char" . "rexp-not-word-char: ()")
    ("rexp-syntax-char" . "rexp-syntax-char: syntax-type")
    ("rexp-not-syntax-char" . "rexp-not-syntax-char: (syntax-type)")
    ("rexp-sequence" . "rexp-sequence: (rexp ...)")
    ("rexp-alternatives" . "rexp-alternatives: (rexp ...)")
    ("rexp-group" . "rexp-group: (rexp ...)")
    ("rexp*" . "rexp*: (rexp ...)")
    ("rexp+" . "rexp+: (rexp ...)")
    ("rexp-optional" . "rexp-optional: (rexp ...)")
    ("rexp-case-fold" . "rexp-case-fold: (rexp)")
    ("string-replace" . "string-replace: (string char1 char2)")
    ("substring-replace" . "substring-replace: (string start end char1 char2)")
    ("string-replace!" . "string-replace!: (string char1 char2)")
    ("substring-replace!" . "substring-replace!: (string start end char1 char2)")
    ("string-fill!" . "string-fill!: (string char)")
    ("substring-fill!" . "substring-fill!: (string start end char)")
    ("substring-move-left!" . "substring-move-left!: (string1 start1 end1 string2 start2)")
    ("substring-move-right!" . "substring-move-right!: (string1 start1 end1 string2 start2)")
    ("reverse-string" . "reverse-string: (string)")
    ("reverse-substring" . "reverse-substring: (string start end)")
    ("reverse-string!" . "reverse-string!: (string)")
    ("reverse-substring!" . "reverse-substring!: (string start end)")
    ("string-maximum-length" . "string-maximum-length: (string)")
    ("set-string-length!" . "set-string-length!: (string k)")
    ("vector-8b-ref" . "vector-8b-ref: (string k)")
    ("vector-8b-set!" . "vector-8b-set!: (string k code)")
    ("vector-8b-fill!" . "vector-8b-fill!: (string start end code)")
    ("vector-8b-find-next-char" . "vector-8b-find-next-char: (string start end code)")
    ("vector-8b-find-next-char-ci" . "vector-8b-find-next-char-ci: (string start end code)")
    ("vector-8b-find-previous-char" . "vector-8b-find-previous-char: (string start end code)")
    ("vector-8b-find-previous-char-ci" . "vector-8b-find-previous-char-ci: (string start end code)")
    ("make-vector" . "make-vector: (k [object])")
    ("vector" . "vector: (object ...)")
    ("vector-copy" . "vector-copy: (vector)")
    ("list->vector" . "list->vector: (list)")
    ("make-initialized-vector" . "make-initialized-vector: (k initialization)")
    ("vector-grow" . "vector-grow: (vector k)")
    ("vector-map" . "vector-map: (procedure vector)")
    ("vector?" . "vector?: (object)")
    ("vector-length" . "vector-length: (vector)")
    ("vector-ref" . "vector-ref: (vector k)")
    ("vector-set!" . "vector-set!: (vector k object)")
    ("vector-first" . "vector-first: (vector)")
    ("vector-second" . "vector-second: (vector)")
    ("vector-third" . "vector-third: (vector)")
    ("vector-fourth" . "vector-fourth: (vector)")
    ("vector-fifth" . "vector-fifth: (vector)")
    ("vector-sixth" . "vector-sixth: (vector)")
    ("vector-seventh" . "vector-seventh: (vector)")
    ("vector-eighth" . "vector-eighth: (vector)")
    ("vector-binary-search" . "vector-binary-search: (vector key<? unwrap-key key)")
    ("subvector" . "subvector: (vector start end)")
    ("vector-head" . "vector-head: (vector end)")
    ("vector-tail" . "vector-tail: (vector start)")
    ("vector-fill!" . "vector-fill!: (vector object)")
    ("subvector-fill!" . "subvector-fill!: (vector start end object)")
    ("subvector-move-left!" . "subvector-move-left!: (vector1 start1 end1 vector2 start2)")
    ("subvector-move-right!" . "subvector-move-right!: (vector1 start1 end1 vector2 start2)")
    ("sort!" . "sort!: (vector procedure)")
    ("merge-sort!" . "merge-sort!: (vector procedure)")
    ("quick-sort!" . "quick-sort!: (vector procedure)")
    ("define-windows-type" . "define-windows-type: (name check convert return revert)")
    ("define-similar-windows-type" . "define-similar-windows-type: (name model [check [convert [return [revert]]]])")
    ("unchecked" . "unchecked: ()")
    ("bool" . "bool: ()")
    ("char" . "char: ()")
    ("int" . "int: ()")
    ("uint" . "uint: ()")
    ("long" . "long: ()")
    ("ulong" . "ulong: ()")
    ("short" . "short: ()")
    ("ushort" . "ushort: ()")
    ("word" . "word: ()")
    ("byte" . "byte: ()")
    ("string" . "string: ()")
    ("char*" . "char*: ()")
    ("handle" . "handle: ()")
    ("hbitmap" . "hbitmap: ()")
    ("hbrush" . "hbrush: ()")
    ("hcursor" . "hcursor: ()")
    ("hdc" . "hdc: ()")
    ("hicon" . "hicon: ()")
    ("hinstance" . "hinstance: ()")
    ("hmenu" . "hmenu: ()")
    ("hpalette" . "hpalette: ()")
    ("hpen" . "hpen: ()")
    ("hrgn" . "hrgn: ()")
    ("hwnd" . "hwnd: ()")
    ("resource-id" . "resource-id: ()")
    ("find-module" . "find-module: (name)")
    ("windows-procedure" . "windows-procedure: ((name (parameter type) ...) return-type module entry-name [options])")
    ("dib" . "dib: ()")
    ("open-dib" . "open-dib: (filename string)")
    ("write-dib" . "write-dib: ((filename string) (dib dib) )")
    ("bitmap-from-dib" . "bitmap-from-dib: ((dib dib) (palette hpalette))")
    ("dib-from-bitmap" . "dib-from-bitmap: ((bitmap hbitmap) (style dword) (bits word) (palette hpalette))")
    ("dib-blt" . "dib-blt: ((dest hdc) (x int) (y int) (w int) (h int) (src dib) (src-x int) (src-y int) (raster-op long))")
    ("delete-dib" . "delete-dib: ((dib dib))")
    ("dib-height" . "dib-height: ((dib dib))")
    ("dib-width" . "dib-width: ((dib dib))")
    ("copy-bitmap" . "copy-bitmap: ((bm hbitmap))")
    ("create-dib" . "create-dib: ((width int) (height int) (style int) (depth int) (palette hpalette))")
    ("crop-bitmap" . "crop-bitmap: ((bm hbitmap) (left int) (top int) (right int) (bottom int))")
    ("dib-set-pixels-unaligned" . "dib-set-pixels-unaligned: (dib (pixels string))")
    ("make-class" . "make-class: (name direct-superclasses direct-slots)")
    ("define-class" . "define-class: (name direct-superclasses direct-slot ...)")
    ("make-trivial-subclass" . "make-trivial-subclass: (superclass1 superclass2 ...)")
    ("class?" . "class?: (object)")
    ("subclass?" . "subclass?: (class specializer)")
    ("object-class" . "object-class: (object)")
    ("class-name" . "class-name: (class)")
    ("class-direct-superclasses" . "class-direct-superclasses: (class)")
    ("class-direct-slot-names" . "class-direct-slot-names: (class)")
    ("class-precedence-list" . "class-precedence-list: (class)")
    ("record-type-class" . "record-type-class: (record-type)")
    ("record-class" . "record-class: (record)")
    ("specializer?" . "specializer?: (object)")
    ("specializer-classes" . "specializer-classes: (specializer)")
    ("specializer=?" . "specializer=?: (specializer1 specializer2)")
    ("union-specializer" . "union-specializer: (specializer ...)")
    ("union-specializer?" . "union-specializer?: (object)")
    ("specializers?" . "specializers?: (object)")
    ("specializers=?" . "specializers=?: (specializers1 specializers2)")
    ("instance-constructor" . "instance-constructor: (class slot-names [n-init-args])")
    ("instance?" . "instance?: (object)")
    ("instance-class" . "instance-class: (instance)")
    ("instance-of?" . "instance-of?: (object specializer)")
    ("instance-predicate" . "instance-predicate: (specializer)")
    ("class-slots" . "class-slots: (class)")
    ("class-slot" . "class-slot: (class name error?)")
    ("slot-descriptor?" . "slot-descriptor?: (object)")
    ("slot-name" . "slot-name: (slot)")
    ("slot-class" . "slot-class: (slot)")
    ("slot-properties" . "slot-properties: (slot)")
    ("slot-property" . "slot-property: (slot name default)")
    ("slot-initial-value?" . "slot-initial-value?: (slot)")
    ("slot-initial-value" . "slot-initial-value: (slot)")
    ("slot-initializer" . "slot-initializer: (slot)")
    ("slot-accessor-method" . "slot-accessor-method: (class name)")
    ("slot-modifier-method" . "slot-modifier-method: (class name)")
    ("slot-initpred-method" . "slot-initpred-method: (class name)")
    ("slot-accessor" . "slot-accessor: (class name)")
    ("slot-modifier" . "slot-modifier: (class name)")
    ("slot-initpred" . "slot-initpred: (class name)")
    ("slot-value" . "slot-value: (instance name)")
    ("set-slot-value!" . "set-slot-value!: (instance name object)")
    ("slot-initialized?" . "slot-initialized?: (instance name)")
    ("make-generic-procedure" . "make-generic-procedure: (arity [name])")
    ("define-generic" . "define-generic: (name lambda-list)")
    ("generic-procedure?" . "generic-procedure?: (object)")
    ("generic-procedure-arity" . "generic-procedure-arity: (generic-procedure)")
    ("generic-procedure-name" . "generic-procedure-name: (generic-procedure)")
    ("add-method" . "add-method: (generic-procedure method)")
    ("delete-method" . "delete-method: (generic-procedure method)")
    ("add-methods" . "add-methods: (generic-procedure methods)")
    ("generic-procedure-methods" . "generic-procedure-methods: (generic-procedure)")
    ("compute-effective-method-procedure" . "compute-effective-method-procedure: (generic-procedure classes)")
    ("compute-method" . "compute-method: (generic-procedure classes)")
    ("make-method" . "make-method: (specializers procedure)")
    ("method?" . "method?: (object)")
    ("method-specializers" . "method-specializers: (method)")
    ("method-procedure" . "method-procedure: (method)")
    ("method-applicable?" . "method-applicable?: (method classes)")
    ("define-method" . "define-method: (generic-procedure lambda-list body ...)")
    ("make-chained-method" . "make-chained-method: (specializers procedure)")
    ("chained-method?" . "chained-method?: (object)")
    ("make-computed-method" . "make-computed-method: (specializers procedure)")
    ("computed-method?" . "computed-method?: (object)")
    ("make-computed-emp" . "make-computed-emp: (key specializers procedure)")
    ("computed-emp?" . "computed-emp?: (object)")
    ("computed-emp-key" . "computed-emp-key: (computed-emp)")
    ("write-instance" . "write-instance: (instance port)")
    ("write-instance-helper" . "write-instance-helper: (name instance port thunk)")
    ("command-line" . "command-line: ()")
    ("simple-command-line-parser" . "simple-command-line-parser: keyword thunk [help]")
    ("argument-command-line-parser" . "argument-command-line-parser: (keyword multiple? procedure [help])")
    ("set-command-line-parser!" . "set-command-line-parser!: (keyword procedure)")
    ("restart" . "restart: ([k])")
    ("ge" . "ge: (environment)")
    ("pe" . "pe: ()")
    ("load" . "load: filename [environment [syntax-table [purify?]]]")
    ("load-option" . "load-option: (symbol [no-error?])")
    ("define-load-option" . "define-load-option: (symbol thunk ...)")
    ("disk-save" . "disk-save: (filename [identify])")
    ("gc-flip" . "gc-flip: ([safety-margin])")
    ("purify" . "purify: (object [pure-space? [queue?]])")
    ("flush-purification-queue!" . "flush-purification-queue!: ()")
    ("print-gc-statistics" . "print-gc-statistics: ()")
    ("set-gc-notification!" . "set-gc-notification!: ([on?])")
    ("toggle-gc-notification!" . "toggle-gc-notification!: ()")
    ("cf" . "cf: filename [destination]")
    ("sf" . "sf: (filename [destination])")
    ("integrate" . "integrate: (name ...)")
    ("integrate-operator" . "integrate-operator: (name ...)")
    ("integrate-external" . "integrate-external: (filename)")
    ("replace-operator" . "replace-operator: (name ...)")
    ("reduce-operator" . "reduce-operator: (name ...)")
    ("ignore-reference-traps" . "ignore-reference-traps: (variables)")
    ("ignore-assignment-traps" . "ignore-assignment-traps: (variables)")
    ("set" . "set: (name ...)")
    ("all" . "all: ()")
    ("none" . "none: ()")
    ("free" . "free: ()")
    ("bound" . "bound: ()")
    ("assigned" . "assigned: ()")
    ("union" . "union: set1 set2")
    ("intersection" . "intersection: (set1 set2)")
    ("difference" . "difference: (set1 set2)")
    ("no-type-checks" . "no-type-checks: ()")
    ("no-range-checks" . "no-range-checks: ()")
    ("flo:vector-cons" . "flo:vector-cons: (n)")
    ("flo:vector-ref" . "flo:vector-ref: (flonum-vector index)")
    ("flo:vector-set!" . "flo:vector-set!: (flonum-vector index value)")
    ("flo:vector-length" . "flo:vector-length: (flonum-vector)")
    ("bkpt" . "bkpt: (datum argument ...)")
    ("pp" . "pp: (object [output-port [as-code?]])")
    ("pa" . "pa: (procedure)")
    ("where" . "where: ([obj])")
    ("apropos" . "apropos: (string [environment [search-parents?]])")
    ("trace-entry" . "trace-entry: (procedure)")
    ("trace-exit" . "trace-exit: (procedure)")
    ("trace-both" . "trace-both: (procedure)")
    ("trace" . "trace: (procedure)")
    ("untrace-entry" . "untrace-entry: ([procedure])")
    ("untrace-exit" . "untrace-exit: ([procedure])")
    ("untrace" . "untrace: ([procedure])")
    ("break-entry" . "break-entry: (procedure)")
    ("break-exit" . "break-exit: (procedure)")
    ("break-both" . "break-both: (procedure)")
    ("break" . "break: (procedure)")
    ("unbreak" . "unbreak: ([procedure])")
    ("unbreak-entry" . "unbreak-entry: ([procedure])")
    ("unbreak-exit" . "unbreak-exit: ([procedure])")
    ("*proc*" . "*proc*: ()")
    ("*args*" . "*args*: ()")
    ("*result*" . "*result*: ()")
    ("advise-entry" . "advise-entry: procedure advice")
    ("advise-exit" . "advise-exit: (procedure advice)")
    ("advice" . "advice: (procedure)")
    ("unadvise-entry" . "unadvise-entry: ([procedure])")
    ("unadvise-exit" . "unadvise-exit: ([procedure])")
    ("unadvise" . "unadvise: ([procedure])")
    ("with-stack-sampling" . "with-stack-sampling: (interval procedure)")
    ("edit" . "edit: ()")
    ("edwin" . "edwin: ()")
    ("create-editor" . "create-editor: (arg ...)")
    ("save-editor-files" . "save-editor-files: ()")
    ("reset-editor" . "reset-editor: ()")
    ("reset-editor-windows" . "reset-editor-windows: ()")))
